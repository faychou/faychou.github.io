<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux 下如何部署 node 应用？</title>
    <url>/Node/linuxdeploynodewithpm2/</url>
    <content><![CDATA[<p>Node 是一个可以在服务器端运行 JavaScript 的环境，作为一个由前端开发步入后端开发，转变为全栈开发的首选后端语言，相信大家都已经非常的熟悉了。现在有很多项目都会选择 Node 来作为后端开发，初出茅庐的兄弟们都想撸起袖子加油干，其中的坑不少，弯弯也不少，但是最终也还是都能解决。在这些问题当中，也许大家都会遇到这么个问题。开发中，可以直接在终端里运行服务器，然后一直挂着。开发完了，再闭关服务器即可。而项目上线的话，一般是部署在 Linux 系统上，并且是一直都能访问的，如果依旧采用开发环境的方式运行项目，就不能关闭终端，或者闭关自己的电脑，不然服务器就不能访问了，很显然不可能一直开机挂着终端吧。</p>
<p>其实作为后端出身的一看就知道是怎么回事了，这就是一个进程守护的问题。Node 的解决方案可以使用 Forever 模块来守护进程、监听程序的运行，而今天给大家介绍另一个更加强大的进程管理工具 pm2，该工具除了可以管理 Node 进程外，还能进行性能监控、自动重启和负载均衡，关键是使用上还非常的简单。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>进入系统后，直接全局下安装该工具（前提是已经安装过 Node了）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -g pm2</span></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p><strong>信息展示</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有pm2运行的所有程序</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">pm2 list</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 显示所有应用程序的 CPU 和内存占用情况（ctrl +c 退出）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">pm2 monit</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前应用程序所有信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">pm2 show appName</span></pre></td></tr></table></figure>

<p><strong>启动程序</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入项目目录后</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 如果是 express 项目，实际启动文件是 `./bin/www` </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 启动2个进程，两个进程之间会自动进行负载均衡，并且监听文件变化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">pm2 start ./bin/www --watch -i 2</span></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><code>--watch</code> 监听文件变化，有变化就会自动重启</li>
<li><code>-i</code> 启用多少个实例，用于负载均衡的，可设置为 <code>-i 0</code> 或者 <code>-i max</code> 来根据设备的核数开启实例数目</li>
<li><code>-x</code> 用 fork 模式启动</li>
<li><code>-n</code> 设置应用名称，方便查看该应用</li>
<li><code>-o</code> 设置标准日志文件输出路径</li>
<li><code>-e</code> 错误日志文件输出路径</li>
</ul>
<p><strong>重启程序</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启所有程序</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">pm2 restart all</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 重启当前的程序</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">pm2 restart app.js</span></pre></td></tr></table></figure>

<p><strong>停止程序</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过 pm2 list 查看appName 或者 appId</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">pm2 stop appName | appId</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 停止所有</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">pm2 stop all</span></pre></td></tr></table></figure>

<p><strong>删除程序</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除所有程序</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">pm2 delete all</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 删除当前的程序</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">pm2 delete appName | appId</span></pre></td></tr></table></figure>

<p><strong>查看日志</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有日志</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">pm2 logs</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前程序日志</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">pm2 logs appName</span></pre></td></tr></table></figure>

<h3 id="pm2-配置文件"><a href="#pm2-配置文件" class="headerlink" title="pm2 配置文件"></a>pm2 配置文件</h3><p>上面提到了多种方式来启动程序，以及 pm2 的各种配置命令，但是 pm2 也支持以配置文件的方式来启动程序，这也是我比较推荐的方法。</p>
<p>在项目根目录新建一个 <code>processes.json</code> 文件：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">"apps"</span>: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">"name"</span>: <span class="string">"api-fay"</span>, <span class="comment">// 名称</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">"cwd"</span>: <span class="string">"./"</span>, <span class="comment">// 根目录</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">"script"</span>: <span class="string">"./bin/www"</span>, <span class="comment">// 启动文件	</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">"log_date_format"</span>: <span class="string">"YYYY-MM-DD HH:mm Z"</span>, <span class="comment">// 日期格式</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">"error_file"</span>: <span class="string">"./logs/node-app.stderr.log"</span>, <span class="comment">// 错误输出日志</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">"out_file"</span>: <span class="string">"./logs/node-app.stdout.log"</span>, <span class="comment">// 日志</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">"pid_file"</span>: <span class="string">"pids/node-geo-api.pid"</span>, <span class="comment">// 自定义应用程序的 pid 文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">"instances"</span>: <span class="number">4</span>, <span class="comment">// 进程数量</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">"min_uptime"</span>: <span class="string">"200s"</span>, <span class="comment">// 最小运行时间，如果程序在200s内退出，则认为程序异常退出，此时触发重启max_restarts设置数量</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">"max_restarts"</span>: <span class="number">10</span>, <span class="comment">// 设置应用程序异常退出重启的次数，默认15次</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">"max_memory_restart"</span>: <span class="string">"10M"</span>, <span class="comment">// 指定超过使用内存上限后自动重启</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">"cron_restart"</span>: <span class="string">"1 0 * * *"</span>, <span class="comment">// 定时重启,仅在 cluster 模式有效, [minute] [hour] [day] [month] [day of week]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">//"watch": true, // 是否启用监控模式，默认是 false。如果为 true，当程序变动时，自动重载，也可以设置为要监控的文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">"watch"</span>:[ <span class="comment">// 需要监控的目录</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		  <span class="string">"bin"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		  <span class="string">"util"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		  <span class="string">"configs"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		  <span class="string">"public"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		  <span class="string">"routes"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		  <span class="string">"views"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	   ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">"merge_logs"</span>: <span class="literal">true</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">"exec_interpreter"</span>: <span class="string">"node"</span>, <span class="comment">// 应用程序的脚本类型，默认是 Node</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">"exec_mode"</span>: <span class="string">"cluster"</span>, <span class="comment">// 应用程序启动模式，这里设置的是 cluster（集群），默认是 fork</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">"autorestart"</span>: <span class="literal">true</span>, <span class="comment">// 启用/禁用应用程序崩溃或退出时自动重启</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">"vizion"</span>: <span class="literal">false</span> <span class="comment">// 启用/禁用 vizion 特性(版本控制)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>然后在 <code>package.json</code> 的 <code>script</code> 中增加一个命令：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"pm2": "pm2 start processes.json"</span></pre></td></tr></table></figure>

<p>最后执行以下命令启动程序即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run pm2</span></pre></td></tr></table></figure>

<p>然后放心大胆的关闭你的终端，pm2 会自动帮你守护 Node 进程，而不用担心服务挂掉了。</p>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>项目中如何解决AJAX跨域的问题？</title>
    <url>/Ajax/projectajaxcross/</url>
    <content><![CDATA[<p>解决跨域的方案有很多，比如说 <code>JsonP</code>、<code>document.domain</code>、<code>window.name</code>、<code>postMessage</code>、<code>nginx</code>等，本文主要讲一下开发环境下如何配置反向代理实现跨域，注意以下方法仅限于开发环境，生产环境不适用。</p>
<h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><p>如果当前项目是通过 <code>webpack</code> 来打包的，则可以利用 <code>devServer</code> 来实现反向代理，具体代码如下：</p>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    entry: &#123;&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">module</span>: &#123;&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// ...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    devServer: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        historyApiFallback: <span class="literal">true</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        proxy: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">'/mock'</span>: &#123; <span class="comment">// 匹配以 /mock 开头的请求，都将被转发</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                target: <span class="string">'http://localhost:3000'</span>,  <span class="comment">// 代理跨域目标服务器接口</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                changeOrigin: <span class="literal">true</span>, <span class="comment">// 默认 false，changeOrigin 是否改变请求头</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                secure: <span class="literal">false</span>,  <span class="comment">// 当代理某些 https 服务报错时用</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// ws: true, // 是否代理 websockets</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                pathRewrite: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="string">'^/mock'</span>: <span class="string">''</span> <span class="comment">// 重写请求，比如原访问 /mock/list，那么请求会被解析为 http://localhost:3000/list</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>比如前端请求地址为 <code>/mock/login</code>，会被转发到地址为 <code>http://localhost:3000/login</code> 的服务器接口。</p>
<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p>无论是 <code>Vue</code>项目还是 <code>React</code> 项目，都是通过 <code>webpack</code> 来构建的，但是通过官方脚手架构建的项目，是对 <code>webpack</code>进行了封装的，看不到相关的配置文件，所以原则上是不能直接去修改 <code>webpack</code> 配置。但是 <code>Vue</code> 可以通过在项目根目录下创建 <code>vue.config.js</code> 文件来覆盖 <code>webpack</code> 的配置，具体配置如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    devServer: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        historyApiFallback: <span class="literal">true</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        proxy: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">'/mock'</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                target: <span class="string">'http://localhost:3000'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                changeOrigin: <span class="literal">true</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                secure: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                pathRewrite: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="string">'^/mock'</span>: <span class="string">''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><p><strong>第一种方式</strong></p>
<p>在 <code>package.json</code> 中添加一个 <code>proxy</code> 字段：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"proxy": "http://faychou.cn"</span></pre></td></tr></table></figure>

<p>不过这种方式在早期 <code>react</code> 项目中有效，在 <code>react-script@2.0.0</code> 或更高版本中，建议使用以下的方式。</p>
<p><strong>第二种方式（推荐）</strong></p>
<p>借助 <code>http-proxy-middleware</code> 模块来实现，项目中安装该模块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i http-proxy-middleware -D</span></pre></td></tr></table></figure>

<p>然后在项目的 <code>src</code> 目录下创建 <code>setupProxy.js</code> 文件，内容如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// const proxy = require("http-proxy-middleware"); // 注意这种写法失效</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    app.use(createProxyMiddleware(</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="string">'/mock'</span>, </span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        target: <span class="string">'http://localhost:3000'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        changeOrigin: <span class="literal">true</span>, </span></pre></td></tr><tr><td class="code"><pre><span class="line">        pathRewrite: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="string">'^/mock'</span>: <span class="string">''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ))</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>该文件不需要引入，<code>react</code> 启动后会自动引入该文件的，配置完毕后，一定要重启服务器后，再测试。</p>
<p><strong>第三种方式（扩展性更强）</strong></p>
<p>还有一种方式比较粗暴，直接运行 <code>npm run eject</code> 命令将项目的 <code>webpack</code> 配置文件暴露出来，但是这种方式会使得项目结构变得非常的复杂，也不容易修改原始配置，但是可以通过 <code>customize-cra</code> 模块来拓展 <code>webpack</code>的配置，首先安装模块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D customize-cra react-app-rewired</span></pre></td></tr></table></figure>

<p>第二步、修改 <code>package.json 的 scripts</code>  的配置：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts": &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    "start": "react-app-rewired start",</span></pre></td></tr><tr><td class="code"><pre><span class="line">    "build": "react-app-rewired build",</span></pre></td></tr><tr><td class="code"><pre><span class="line">    "test": "react-app-rewired test --env=jsdom",</span></pre></td></tr><tr><td class="code"><pre><span class="line">    "eject": "react-scripts eject"</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>第三步、在项目的根目录下创建<code>config-overrides.js</code>，内容如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; overrideDevServer &#125; = <span class="built_in">require</span>(<span class="string">'customize-cra'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  devServer: overrideDevServer(<span class="function">(<span class="params">config</span>)=&gt;</span> (</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      ...config,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      proxy: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">'/api'</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          target: <span class="string">'http://localhost:3000'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          changeOrigin: <span class="literal">true</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          pathRewrite: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">'^/api'</span>: <span class="string">''</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;, </span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">'/mock'</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          target: <span class="string">'http://localhost:3003'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          changeOrigin: <span class="literal">true</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          pathRewrite: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">'^/mock'</span>: <span class="string">''</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ))</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>

<p>然后通过 <code>yarn start</code> 运行项目即可。</p>
]]></content>
      <categories>
        <category>Ajax</category>
      </categories>
      <tags>
        <tag>ajax</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Node 打通支付宝支付（沙箱环境）</title>
    <url>/Node/nodealipaysand/</url>
    <content><![CDATA[<p>沙箱环境 (Beta) 是协助开发者进行接口功能开发及主要功能联调的辅助环境，模拟了开放平台部分产品的主要功能和主要逻辑。可用于在产品上线前了解环境、组合和调试各种接口。</p>
<h4 id="沙箱环境配置"><a href="#沙箱环境配置" class="headerlink" title="沙箱环境配置"></a>沙箱环境配置</h4><p>打开 <a href="https://openhome.alipay.com/developmentAccess/developmentAccess.htm" target="_blank" rel="noopener">支付宝开发者中心</a> 并登录，点击 =&gt; 进入我的控制台（也可能登录之后自动进入），</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1geoy8s5kctj213r0hz0u0.jpg" alt="1.jpg"></p>
<a id="more"></a>

<p>在开发者中心中点击开发服务下的研发服务，就进入沙箱环境页面了，</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1geoy8zw0nyj20sl0oyjs3.jpg" alt="2.jpg"></p>
<p>在沙箱应用可以看到基本配置。</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1geoy98srecj214j0pxq46.jpg" alt="3.jpg"></p>
<h4 id="密钥配置"><a href="#密钥配置" class="headerlink" title="密钥配置"></a>密钥配置</h4><p>点击 RSA2(SHA256)密钥 设置，</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1geoy9gltwpj20rx0awdg9.jpg" alt="4.jpg"></p>
<p>点击 <a href="https://opendocs.alipay.com/open/291/106097/" target="_blank" rel="noopener">支付宝密钥生成器</a>，下载对应版本的工具，下载完成后将工具安装在不包含空格的目录中，</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1geoy9r99oij20kp0e6dg5.jpg" alt="5.jpg"></p>
<p>然后点打开，点击生成密钥，即可生成商户应用私钥与商户应用公钥。然后点击复制公钥。</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1geoya4bdr0j20u00lodiz.jpg" alt="8.jpg"></p>
<p>回到沙箱界面，选择公钥，并把刚刚复制的公钥粘贴进去；</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1geoyaftfrhj20je0cqmy0.jpg" alt="9.jpg"></p>
<p>然后就可以得到支付宝公钥了，代码中会用到。</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1geoyap4iu7j20je0dyjsf.jpg" alt="10.jpg"></p>
<h4 id="node-API-配置"><a href="#node-API-配置" class="headerlink" title="node API 配置"></a>node API 配置</h4><p>首先安装 Alipay SDK：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install alipay-sdk -S</span></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sdk 配置语法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">alipaySdk.exec(method, params, options);</span></pre></td></tr></table></figure>

<ul>
<li>method：字符串类型，调用的 Api，比如 <code>alipay.trade.page.pay</code> ；</li>
<li>params：可选参数，对象结构，Api 的请求参数；</li>
<li>options：包含<ul>
<li>validateSign：布尔值，是否对返回值验签，需要依赖支付宝公钥；</li>
<li>formData：对象结构，文件上传类接口的请求参数；</li>
<li>log：对象结构，存在时会调用 info、error 方法写日志。</li>
</ul>
</li>
</ul>
<p><a href="https://www.yuque.com/chenqiu/alipay-node-sdk/guide" target="_blank" rel="noopener">详细文档看这里</a> 说是 nodejs SDK 文档，当真是写的很简单，需要大家对照支付宝开发文档。</p>
<p>由于每次调用 AlipaySdk 的 API 都是同一个对象，所以该对象只需要实例化一次：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// alipay.js 这里单独存放一个文件中，需要时引入即可</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> AlipaySdk = <span class="built_in">require</span>(<span class="string">'alipay-sdk'</span>).default; <span class="comment">// 引入 SDK</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> alipaySdk =  <span class="keyword">new</span>  AlipaySdk(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  appId: <span class="string">'appId'</span>, <span class="comment">// 开放平台上创建应用时生成的 appId</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  signType: <span class="string">'RSA2'</span>, <span class="comment">// 签名算法,默认 RSA2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  gateway: <span class="string">'https://openapi.alipaydev.com/gateway.do'</span>, <span class="comment">// 支付宝网关地址 ，沙箱环境下使用时需要修改</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  alipayPublicKey: <span class="string">'public_key'</span>, <span class="comment">// 支付宝公钥，需要对结果验签时候必填</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  privateKey: <span class="string">'private_key'</span>, <span class="comment">// 应用私钥字符串</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = alipaySdk;</span></pre></td></tr></table></figure>

<p>要完成支付，需要以下几个步骤，</p>
<ul>
<li>服务器端需要调用支付 API <a href="https://opendocs.alipay.com/apis/api_1/alipay.trade.page.pay" target="_blank" rel="noopener"><code>alipay.trade.page.pay</code></a> 来获取支付页面的地址；</li>
<li>将得到的支付地址发给客户端，由客户端进行页面跳转；</li>
</ul>
<p>先来看看服务端接口的实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> router = express.Router();</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> alipaySdk = <span class="built_in">require</span>(<span class="string">'../utils/alipay'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> AlipayFormData = <span class="built_in">require</span>(<span class="string">'alipay-sdk/lib/form'</span>).default; <span class="comment">// alipay.trade.page.pay 返回的内容为 Form 表单</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">router.post(<span class="string">'/pcpay'</span>, (req, res) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    (<span class="keyword">async</span> () =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 调用 setMethod 并传入 get，会返回可以跳转到支付页面的 url</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> formData = <span class="keyword">new</span> AlipayFormData();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        formData.setMethod(<span class="string">'get'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 通过 addField 增加参数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 在用户支付完成之后，支付宝服务器会根据传入的 notify_url，以 POST 请求的形式将支付结果作为参数通知到商户系统。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        formData.addField(<span class="string">'notifyUrl'</span>, <span class="string">'http://www.com/notify'</span>); <span class="comment">// 支付成功回调地址，必须为可以直接访问的地址，不能带参数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        formData.addField(<span class="string">'bizContent'</span>, &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            outTradeNo: req.body.outTradeNo, <span class="comment">// 商户订单号,64个字符以内、可包含字母、数字、下划线,且不能重复</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            productCode: <span class="string">'FAST_INSTANT_TRADE_PAY'</span>, <span class="comment">// 销售产品码，与支付宝签约的产品码名称,仅支持FAST_INSTANT_TRADE_PAY</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            totalAmount: <span class="string">'0.01'</span>, <span class="comment">// 订单总金额，单位为元，精确到小数点后两位</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            subject: <span class="string">'商品'</span>, <span class="comment">// 订单标题</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            body: <span class="string">'商品详情'</span>, <span class="comment">// 订单描述</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 如果需要支付后跳转到商户界面，可以增加属性"returnUrl"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> alipaySdk.exec(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">'alipay.trade.page.pay'</span>, <span class="comment">// 统一收单下单并支付页面接口</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;&#125;, <span class="comment">// api 请求的参数（包含“公共请求参数”和“业务参数”）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123; <span class="attr">formData</span>: formData &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// result 为可以跳转到支付链接的 url</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        res.json(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            url: result</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<p>然后就是前端页面，这个比较简单，就是点击支付按钮，向服务器发起请求，拿到返回的支付页面地址后进行跳转：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    method: <span class="string">'POST'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    url: <span class="string">'/alipay/pcpay'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    data: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        outTradeNo <span class="comment">// 商户订单号，必须保证唯一，生成方法有很多，可以去看我的代码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">.done(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">window</span>.open(res.url, <span class="string">'_blank'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">.fail(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(err);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<p>如果上诉没有问题，我们应该能看到这样的页面：</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1geoyax2ud2j20w60nljsf.jpg" alt="11.jpg"></p>
<p>如果是使用沙箱环境，必须下载沙箱钱包来完成支付，下载地方如下所示：</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1geoybbyy7qj20zg0kp3zl.jpg" alt="12.jpg"></p>
<p>下载完成后，使用沙箱提供的账号登陆即可，随便充值，随便消费，其实沙箱钱包里就是一个数字而已。</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1geoybna37wj20zr0op3zg.jpg" alt="13.jpg"></p>
<p>然后这里补充一个点，就是前端如何判断用户是否已经支付。我们都知道前端的手段是不被信任的，所以不能依赖前端来判断，唯一可靠的方法是使用支付宝 API 中的 <a href="https://opendocs.alipay.com/apis/api_1/alipay.trade.query" target="_blank" rel="noopener"><code>alipay.trade.query</code></a> 来查询是否已经完成支付。</p>
<p>可以通过前端发送订单号到服务器进行查询，服务器向支付宝服务器查询该订单号支付的相关信息，通过交易状态来确定是否已经完成支付，具体服务器配置如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> alipaySdk = <span class="built_in">require</span>(<span class="string">'../utils/alipay'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> AlipayFormData = <span class="built_in">require</span>(<span class="string">'alipay-sdk/lib/form'</span>).default;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">router.get(<span class="string">'/query'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    (<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> &#123; outTradeNo &#125; = req.query;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> formData = <span class="keyword">new</span> AlipayFormData();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        formData.setMethod(<span class="string">'get'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        formData.addField(<span class="string">'bizContent'</span>, &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          outTradeNo</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 通过该接口主动查询订单状态</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> alipaySdk.exec(</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="string">'alipay.trade.query'</span>, </span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#123;&#125;, </span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#123; <span class="attr">formData</span>: formData &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        axios(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          method: <span class="string">'GET'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          url: result</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">let</span> r = data.data.alipay_trade_query_response;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">if</span>(r.code === <span class="string">'10000'</span>) &#123; <span class="comment">// 接口调用成功</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">switch</span>(r.trade_status) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">              <span class="keyword">case</span> <span class="string">'WAIT_BUYER_PAY'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                res.send(<span class="string">'交易创建，等待买家付款'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">              <span class="keyword">case</span> <span class="string">'TRADE_CLOSED'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                res.send(<span class="string">'未付款交易超时关闭，或支付完成后全额退款'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">              <span class="keyword">case</span> <span class="string">'TRADE_SUCCESS'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                res.send(<span class="string">'交易支付成功'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">              <span class="keyword">case</span> <span class="string">'TRADE_FINISHED'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                res.send(<span class="string">'交易结束，不可退款'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span>(r.code === <span class="string">'40004'</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            res.send(<span class="string">'交易不存在'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          res.json(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            msg: <span class="string">'查询失败'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            err</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<p><a href="https://github.com/faychou/code-example/tree/master/node-example/node-alipay-dev" target="_blank" rel="noopener">源码地址</a></p>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Node</tag>
        <tag>支付</tag>
      </tags>
  </entry>
  <entry>
    <title>使用NodeJS上传图片之：multer的使用</title>
    <url>/Node/nodemultertupianshangchuan/</url>
    <content><![CDATA[<p>图片上传在 web 开发中是一种非常常见的场景，如用户头像上传，前端页面将图片发送到服务器存储后，再返回图片在服务器的地址，然后前端根据这个图片地址进行展示。</p>
<p>这里以头像上传为例，先来看看前端页面的处理：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"avatorForm"</span> <span class="attr">name</span>=<span class="string">"avatorForm"</span> &gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"avator"</span> <span class="attr">name</span>=<span class="string">"avator"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"avatorBtn"</span>&gt;</span>上传头像<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用于头像预览 --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"avatorImg"</span>&gt;</span></span></pre></td></tr></table></figure>

<a id="more"></a>

<p>这里是以 AJAX 异步请求的方式发送图片，如果是直接提交表单，则需要在 <code>form</code> 标签上设置 <code>enctype=&quot;multipart/form-data&quot;</code> 属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">viewAvator</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $(<span class="string">"#avator"</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.files &amp;&amp; <span class="keyword">this</span>.files[<span class="number">0</span>]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader(); <span class="comment">// 异步读取文件的 api</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            reader.readAsDataURL(<span class="keyword">this</span>.files[<span class="number">0</span>]); <span class="comment">// 指定读取的对象，只能是 file 或 blob 对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">			</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 读取完毕后 result 属性会返回 base64 编码的字符串以表示所读取的内容</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $(<span class="string">'#avatorImg'</span>).attr(<span class="string">'src'</span>, reader.result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">viewAvator(); <span class="comment">// 头像预览</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 头像上传</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$(<span class="string">'#avatorBtn'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> avator = $(<span class="string">'#avator'</span>).get(<span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(avator.files.size &gt; <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>) &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">        alert(<span class="string">"上传图片过大，请保持在2M内"</span>) </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        uploadAvator(); <span class="comment">// 上传</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadAvator</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> file = $(<span class="string">'#avator'</span>).get(<span class="number">0</span>).files[<span class="number">0</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> avatorForm = $(<span class="string">'#avatorForm'</span>).get(<span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">let</span> formData = <span class="keyword">new</span> FormData(avatorForm); <span class="comment">// 把已有的 form 作为参数，后台 req.file 获取</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    formData.append(<span class="string">'username'</span>, <span class="string">'faychou'</span>); <span class="comment">// 继续添加其他文本信息，后台 req.body 获取</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    $.ajax(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        method: <span class="string">'POST'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        url: <span class="string">'/upload/avator'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        data: formData,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mimeType: <span class="string">"multipart/form-data"</span>, <span class="comment">// 注意这里的 mimeType</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        processData : <span class="literal">false</span>, <span class="comment">// 不去处理发送的数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        contentType : <span class="literal">false</span> <span class="comment">// 不去设置 Content-Type 请求头</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(data);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .fail(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(err);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>通过上一步之后，就需要在服务器上编写对应的接口来接受这个图片：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = express.Router();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 自动创建目录</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (fs.existsSync(<span class="string">'./public/uploads'</span>)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'已经创建过此更新目录了'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  fs.mkdirSync(<span class="string">'./public/uploads'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'更新目录已创建成功\n'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// let upload = multer(&#123;dest: 'public/uploads'&#125;); // 简单的配置，直接指定文件存储位置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 也可以像下面这样详细配置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> storage = multer.diskStorage(&#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 设置上传后文件路径，uploads 文件夹不会自动创建，,所以才有了上面 fs 创建文件夹的一步 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  destination(req, file, cb) &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    cb(<span class="literal">null</span>, <span class="string">'./public/uploads'</span>) </span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;, </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 给上传文件重命名，获取添加后缀名 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  filename(req, file, cb) &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> fileFormat = (file.originalname).split(<span class="string">"."</span>); </span></pre></td></tr><tr><td class="code"><pre><span class="line">    cb(<span class="literal">null</span>, file.fieldname + <span class="string">'-'</span> + <span class="built_in">Date</span>.now() + <span class="string">"."</span> + fileFormat[fileFormat.length - <span class="number">1</span>]); </span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125; </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);   </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 添加配置文件到 multer 对象。 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> upload = multer(&#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">  storage: storage </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 注意  single() 函数中的 参数 必须和前端 input 的 name 相同</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">router.post(<span class="string">'/avator'</span>, upload.single(<span class="string">'avator'</span>), <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'头像图片信息：'</span>, req.file); <span class="comment">// 文件信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'头像文本域数据，如果存在的话：'</span>, req.body);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    res.json(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        msg:<span class="string">'头像上传成功'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        url: <span class="string">'/uploads/'</span> + req.file.filename <span class="comment">// filename 是保存在 destination 中的文件名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<p>这里后台是直接使用 express 框架，本身是不支持接受文件的，所以这里依赖 multer 这个三方模块，用于处理 <code>multipart/form-data</code> 类型的表单数据，主要用于文件上传。</p>
<p>multer 会添加一个 <code>body</code> 对象 以及 <code>file</code> 或 <code>files</code> 对象 到 express 的 <code>request</code> 对象中。 <code>body</code> 对象包含表单的文本域信息，<code>file</code> 或 <code>files</code> 对象包含对象表单上传的文件信息。所以可以通过 <code>request.body</code> 获取表单上传的文本信息，<code>request.file</code> 获取表单上传的单文件信息，<code>request.files</code> 获取表单上传的多文件信息。</p>
<p>multer 对象主要有以下的几个方法：</p>
<ul>
<li><p><code>.fields(fields)</code></p>
<p>接受指定 fields 的混合文件。这些文件的信息保存在 <code>request.files</code>。fields 应该是一个对象数组，应该具有 name 和可选的 maxCount 属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">upload.fields([&#123;<span class="attr">name</span>:<span class="string">'avatar'</span>,<span class="attr">maxCount</span>:<span class="number">1</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">'gallery'</span>,<span class="attr">maxCount</span>:<span class="number">8</span>&#125;]);</span></pre></td></tr></table></figure>
</li>
<li><p><code>.single(fieldname)</code><br>接受一个以 fieldname 命名的文件，fieldname 和上传图片表单名一样。这个文件的信息保存在 <code>request.file</code>。</p>
</li>
<li><p><code>.array(fieldname[,  maxCount])</code><br>接受一个以 fieldname 命名的文件数组。可以配置 maxCount 来限制上传的最大数量。这些文件的信息保存在 <code>request.files</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">upload.array(<span class="string">'photos'</span>, <span class="number">12</span>) <span class="comment">// 最大为 12 个 photos 名的文件</span></span></pre></td></tr></table></figure>
</li>
<li><p><code>.none()</code><br>只接受文本域。如果任何文件上传到这个模式，将发生 “LIMIT_UNEXPECTED_FILE” 错误。这和 <code>upload.fields([])</code>  的效果一样。</p>
</li>
<li><p><code>.any()</code><br>接受一切上传的文件。文件数组将保存在 <code>request.files</code>。</p>
</li>
<li><h4 id="none"><a href="#none" class="headerlink" title=".none()"></a><code>.none()</code></h4><p>只接受文本域。如果任何文件上传到这个模式，将发生 “LIMIT_UNEXPECTED_FILE” 错误。这和 <code>upload.fields([])</code> 的效果一样。</p>
</li>
</ul>
<p>基于上述的内容，来看看多图上传的方法，首先是前端部分，需要在 input 标签上添加 multiple 属性：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"multiForm"</span> <span class="attr">name</span>=<span class="string">"multiForm"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"multi"</span> <span class="attr">name</span>=<span class="string">"multi"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span> <span class="attr">multiple</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"multiBtn"</span>&gt;</span>多图上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#multiBtn'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> multiForm = $(<span class="string">'#multiForm'</span>).get(<span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(multiForm);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    formData.append(<span class="string">'username'</span>, <span class="string">'faychou'</span>); <span class="comment">// 继续添加其他信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    $.ajax(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        method: <span class="string">'POST'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        url: <span class="string">'/upload/multi'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        data: formData,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mimeType: <span class="string">"multipart/form-data"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        processData : <span class="literal">false</span>, </span></pre></td></tr><tr><td class="code"><pre><span class="line">        contentType : <span class="literal">false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(data);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .fail(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(err);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<p>后台可以使用 multer 对象的 array 方法设置允许上传的最大图片数量：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 其他配置参考上面单图上传配置，这里允许最多上传5张图片</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">router.post(<span class="string">'/multi'</span>, upload.array(<span class="string">'multi'</span>, <span class="number">5</span>), <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'多图图片信息：'</span>, req.files); <span class="comment">// 文件信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'多图文本域数据，如果存在的话：'</span>, req.body);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> urls = [];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; req.files.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        urls.push(<span class="string">'/uploads/'</span> + req.files[i].filename)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    res.json(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    	msg:<span class="string">'多图上传成功'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    	urls</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<p>点击这里可以<a href="https://github.com/faychou/code-example/tree/master/node-example/pic-upload-to-qiniu" target="_blank" rel="noopener">查看源码</a>。</p>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Node</tag>
        <tag>上传</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 NodeJS 搭建七牛云图床</title>
    <url>/Node/nodeqiniuyuntuchuang/</url>
    <content><![CDATA[<p>上一期给大家讲了怎么通过 nodejs 上传图片到本地服务器，后来有朋友在问，怎么实现将图片上传到第三方云平台，比如七牛云、腾讯云等。毕竟云平台的优点还是蛮多的，比如自定图片的尺寸和缩放、自动压缩、水印添加、防盗链、统计图片的各种访问数据等等，甚至 CDN 加速。</p>
<h4 id="账号注册"><a href="#账号注册" class="headerlink" title="账号注册"></a>账号注册</h4><p>这里以七牛云为例，为什么不用其他的，毕竟免费 10G 的空间，拿来做自己博客的云图床也还是很不错的，没有账号的可以 <a href="https://portal.qiniu.com/signup?code=1hecvqoj6fz2q" target="_blank" rel="noopener">点击这里注册</a>。</p>
<p>注册之后先进行实名认证，这个比较简单；然后在首页的右上角的导航处进入控制台 ，选择对象存储的立即添加，</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1geoxza9fpgj20ox0mzmyh.jpg" alt="1.jpg"></p>
<a id="more"></a>

<p>新建空间（会在这里设置空间名），</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1geoy3syo79j213l0ogmy1.jpg" alt="2.jpg"></p>
<p>创建成功后，点击对象存储右边的域名，进行域名绑定，如果暂时没有域名，这一步可以省略，因为七牛云赠送了一个月的免费域名，用于测试阶段还是很 nice 的。</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1geoy4693y5j20z209vglx.jpg" alt="3.jpg"></p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1geoy4f644rj20y70hv758.jpg" alt="4.jpg"></p>
<p>在个人中心，找到密钥管理，创建一个密钥，之后会生成一个 accessKey 和 secretKey，这个很重要，后面代码会用到的。</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1geoy5c1x1zj20i00a8dg3.jpg" alt="5.jpg"></p>
<h4 id="SDK-的使用"><a href="#SDK-的使用" class="headerlink" title="SDK 的使用"></a>SDK 的使用</h4><p>接下来先讲讲图片上传的步骤：</p>
<ul>
<li><p>要想实现图片上传，需要有一个 token 进行授权操作，而这个 token 可以在服务器端根据 AccessKey 、SecretKey 和 bucket（存储空间名称）来生成；</p>
</li>
<li><p>将图片源和 token 提交到七牛云进行存储；</p>
</li>
</ul>
<p>下面就以三种不同的方式来处理图片上传：</p>
<p><strong>服务器端以 base64 形式上传图片</strong></p>
<p>这种方式是客户端以 base64 格式将图片发送到服务器，然后服务器处理为流的形式再上传，具体代码如下：</p>
<p>客户端代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"fileBase64"</span> /&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btnBase64"</span>&gt;</span>上传 base64<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> imgBase64; <span class="comment">// 用于保存base64 格式的图片</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">toBase64();</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toBase64</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $(<span class="string">"#fileBase64"</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.files &amp;&amp; <span class="keyword">this</span>.files[<span class="number">0</span>]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();            </span></pre></td></tr><tr><td class="code"><pre><span class="line">            reader.readAsDataURL(<span class="keyword">this</span>.files[<span class="number">0</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                imgBase64 = reader.result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      </span></pre></td></tr><tr><td class="code"><pre><span class="line">$(<span class="string">'#btnBase64'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $.ajax(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        url: <span class="string">'http://127.0.0.1:3000/qiniu/upload-base64'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        method: <span class="string">'POST'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        data: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            imgBase64</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .done(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(res)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .fail(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(err)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<p>服务器端：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ./config/qiniu.config</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  accessKey: <span class="string">'七牛云个人中心里获取的 accessKey'</span>, <span class="comment">// accessKey</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  secretKey: <span class="string">'七牛云个人中心里获取的 secretKey'</span>, <span class="comment">// secretKey</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  bucket: <span class="string">'fcs-public'</span>, <span class="comment">// 要上传的空间名(仓库名字)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  qiniuUrl: <span class="string">'q9xv20b60.bkt.clouddn.com'</span> <span class="comment">// 空间绑定的域名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这里将关于七牛云的配置信息单独放在一个文件中，方便管理。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ./routes/qiniu.js</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> qiniu = <span class="built_in">require</span>(<span class="string">"qiniu"</span>); <span class="comment">// 引入七牛模块</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Duplex &#125; = <span class="built_in">require</span>(<span class="string">'stream'</span>); <span class="comment">// 双工流,即读写流</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; bucket, qiniuUrl, accessKey, secretKey&#125; = <span class="built_in">require</span>(<span class="string">'../config/qiniu.config'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = express.Router();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mac = <span class="keyword">new</span> qiniu.auth.digest.Mac(accessKey, secretKey); <span class="comment">// 鉴权对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> options = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  scope: bucket,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// expires: 7200 // 上传凭证的有效时间,默认为1个小时,单位为秒</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> putPolicy = <span class="keyword">new</span> qiniu.rs.PutPolicy(options);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> uploadToken = putPolicy.uploadToken(mac); <span class="comment">// 这就是上文提到的 token</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = <span class="keyword">new</span> qiniu.conf.Config(); <span class="comment">// 构建上传 config 对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">config.zone = qiniu.zone.Zone_z2;; <span class="comment">// 指定空间对应的机房,z2指华南机房</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//config.useHttpsDomain = true; // 是否使用 https 域名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//config.useCdnDomain = true; // 上传是否使用 cdn 加速</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> formUploader = <span class="keyword">new</span> qiniu.form_up.FormUploader(config); <span class="comment">// 文件上传（表单方式）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> putExtra = <span class="keyword">new</span> qiniu.form_up.PutExtra();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/* -------------------- 上传 base64 -------------------- */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">router.post(<span class="string">'/upload-base64'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> imgData = req.body.imgBase64;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> base64Data = imgData.replace(<span class="regexp">/^data:image\/\w+;base64,/</span>, <span class="string">""</span>); <span class="comment">// 过滤, base64 必须去掉头文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> dataBuffer = Buffer.from(base64Data, <span class="string">'base64'</span>); <span class="comment">// 转为二进制</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> key = <span class="built_in">Date</span>.now() + <span class="string">'.png'</span>; <span class="comment">// 上传到服务器的名称</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> readableStream = Duplex(); <span class="comment">// 可读可写的双工流</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  readableStream.push(dataBuffer);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  readableStream.push(<span class="literal">null</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  formUploader.putStream(uploadToken, key, readableStream, putExtra, <span class="function"><span class="keyword">function</span>(<span class="params">respErr,</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="params">    respBody, respInfo</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (respErr) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      res.json(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        status: <span class="string">'0'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        msg: <span class="string">'上传失败'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        error: respErr</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (respInfo.statusCode == <span class="number">200</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">console</span>.log(<span class="string">'文件上传成功后返回的信息:'</span>, respBody);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">const</span> imageUrl = path.join(qiniuUrl, <span class="string">'/'</span>, respBody.key); <span class="comment">// 返回图片的完整地址</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      res.json(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        status: <span class="string">'200'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        msg: <span class="string">'上传成功'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        imageUrl</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">console</span>.log(respInfo.statusCode);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">console</span>.log(respBody);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      res.json(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        status: <span class="string">'0'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        msg: <span class="string">'上传失败'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        error: respBody</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<p><strong>服务器借助 multer 模块实现上传</strong></p>
<p>第二种方式和第一种很类似，也是客户端传图片到服务器，服务器再上传图片到七牛云，只是这种是客户端直接以 <code>form-data</code> 的形式提交，服务器使用三方模块 multer 将图片上传到服务器，然后再从服务器上上传图片。</p>
<p>先来看看客户端的代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"fileFormData"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"fileData"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btnForm"</span>&gt;</span>上传表单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#btnForm'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> fileForm = $(<span class="string">'#fileFormData'</span>).get(<span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">let</span> formData = <span class="keyword">new</span> FormData(fileForm); <span class="comment">// 把已有的 form 作为参数，后台 req.file 获取</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    $.ajax(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        url: <span class="string">'http://127.0.0.1:3000/qiniu/upload-formdata'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        method: <span class="string">'POST'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        data: formData,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mimeType: <span class="string">"multipart/form-data"</span>, </span></pre></td></tr><tr><td class="code"><pre><span class="line">        processData : <span class="literal">false</span>, <span class="comment">// 不去处理发送的数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        contentType : <span class="literal">false</span> <span class="comment">// 不去设置 Content-Type 请求头</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .done(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(res)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .fail(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(err)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<p>服务器端：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> storage = multer.diskStorage(&#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 设置上传后文件路径</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  destination: <span class="function"><span class="keyword">function</span> (<span class="params">req, file, cb</span>) </span>&#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    cb(<span class="literal">null</span>, <span class="string">'./public/tem'</span>) </span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;, </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 上传文件重命名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  filename: <span class="function"><span class="keyword">function</span> (<span class="params">req, file, cb</span>) </span>&#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> fileFormat = (file.originalname).split(<span class="string">"."</span>); </span></pre></td></tr><tr><td class="code"><pre><span class="line">    cb(<span class="literal">null</span>, file.fieldname + <span class="string">'-'</span> + <span class="built_in">Date</span>.now() + <span class="string">"."</span> + fileFormat[fileFormat.length - <span class="number">1</span>]); </span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125; </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);   </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 添加配置文件到 muler 对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> upload = multer(&#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">  storage: storage </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;).single(<span class="string">'fileData'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 自动创建目录</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// ./public/tem 是服务器的目录，用于临时存储客户端传来的图片，图片成功上传到七牛云后，会删除该文件夹下图片</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="keyword">if</span> (fs.existsSync(<span class="string">'./public/tem'</span>)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'已经创建过此更新目录了'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  fs.mkdirSync(<span class="string">'./public/tem'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'更新目录已创建成功\n'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">router.post(<span class="string">'/upload-formdata'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  upload(req, res, (err) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (err) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// 发生错误</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'上传文件到服务器出错:'</span>, err);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> localFile = path.resolve(<span class="string">'public/tem/'</span>, req.file.filename);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> key = <span class="built_in">Date</span>.now() + <span class="string">'.png'</span>; <span class="comment">// 上传到服务器的名称</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    formUploader.putFile(uploadToken, key, localFile, putExtra, <span class="function"><span class="keyword">function</span> (<span class="params">respErr,</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="params">      respBody, respInfo</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span> (respErr) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        res.json(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          status: <span class="string">'0'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          msg: <span class="string">'上传失败'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          error: respErr</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span> (respInfo.statusCode == <span class="number">200</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(<span class="string">'文件上传成功后返回的信息:'</span>, respBody);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> imageUrl = path.join(qiniuUrl, respBody.key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">          </span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">		fs.unlink(<span class="string">'./public/tem/'</span> + req.file.filename, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123; <span class="comment">// 将临时文件夹中的图片删除</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span>(error) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="built_in">console</span>.log(<span class="string">'删除临时图片失败'</span>, error);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="built_in">console</span>.log(<span class="string">'删除临时图片成功'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        res.json(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          status: <span class="string">'200'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          msg: <span class="string">'上传成功'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          imageUrl</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(respInfo.statusCode);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(respBody);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        res.json(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          status: <span class="string">'0'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          msg: <span class="string">'上传失败'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          error: respBody</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<p>这种方式就多了一个步骤，先将图片上传到服务器，然后再从服务器上将图片上传到七牛云，稍微麻烦了一点，但是以上两种方式其实都是客户端以一种方式将图片先传给服务器，然后服务器处理后再进行上传，都还是比较麻烦，服务器压力比较大。其实这里更推荐第三种方式，直接服务器端生成 token 发给客户端，然后客户端根据这个 token 直接上传图片到七牛云。</p>
<p><strong>客户端直接上传图片到七牛云</strong></p>
<p>首先客户端先引入七牛云提供的 JavaScript 的 SDK：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/qiniu-js@2.5.5/dist/qiniu.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure>

<p>或者使用 npm：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install qiniu-js --save</span></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> qiniu <span class="keyword">from</span> <span class="string">'qiniu-js'</span></span></pre></td></tr></table></figure>

<p>先看简单的服务器设置，直接设置接口返回 token，这里的 uploadToken 和 qiniuUrl 在第一种方式有写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">'/getUploadToken'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    res.json(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        uploadToken,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        qiniuUrl</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<p>然后客户端先获取 token 凭证：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    url: <span class="string">'http://127.0.0.1:3000/qiniu/getUploadToken'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    method: <span class="string">'GET'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">.done(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(res)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    uploadToken = res.uploadToken;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    qiniuUrl = res.qiniuUrl;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">.fail(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(err)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<p>下一步就是直接将图片上传到七牛云，完整代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"fileFormClient"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"fileClient"</span> <span class="attr">name</span>=<span class="string">"fileClient"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btnClient"</span>&gt;</span>客户端直接上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> uploadToken,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    qiniuUrl,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    base64Data;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123; <span class="comment">// 上传配置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    useCdnDomain: <span class="literal">true</span>, <span class="comment">// 使用 cdn 加速</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> putExtra = &#123; <span class="comment">// 额外配置，如限制上传文件的类型</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    mimeType: [<span class="string">'image/png'</span>, <span class="string">'image/jpeg'</span>, <span class="string">'image/gif'</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    url: <span class="string">'http://127.0.0.1:3000/qiniu/getUploadToken'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    method: <span class="string">'GET'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">.done(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(res)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    uploadToken = res.uploadToken;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    qiniuUrl = res.qiniuUrl;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">.fail(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(err)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">$(<span class="string">'#btnClient'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> file = $(<span class="string">'#fileClient'</span>).get(<span class="number">0</span>).files[<span class="number">0</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> key = <span class="built_in">Date</span>.now() + <span class="string">'.png'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> observable = qiniu.upload(file, key, uploadToken, putExtra, config)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    observable.subscribe(&#123; <span class="comment">// 用来设置上传过程的监听函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        next: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123; <span class="comment">// res 包含 loaded、total、percent 三个属性，提供上传进度信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">console</span>.log(res);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">console</span>.log(<span class="string">'上传图片失败'</span>, err);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        complete: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123; <span class="comment">// 接收上传完成后返回的信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">console</span>.log(res);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">console</span>.log(<span class="string">'图片地址：'</span>, qiniuUrl + <span class="string">'/'</span> + res.key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<p>所以完整代码看这里 <a href="https://github.com/faychou/code-example/tree/master/node-example/pic-upload-to-qiniu" target="_blank" rel="noopener">源码</a>。</p>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Node</tag>
        <tag>上传</tag>
      </tags>
  </entry>
  <entry>
    <title>新年粒子动画祝福</title>
    <url>/HTML5/newyearparticle/</url>
    <content><![CDATA[<p>首先祝愿所有的小伙伴除夕快乐，有一段时间没有更新了，前两天看到一个大神写的粒子动画，很是有趣，正值春节期间，我就直接拿来稍作修改，做成一个新年祝福动画，效果如下：</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1gb7wnnykrhg205k046k0o.gif" alt="粒子效果"></p>
<p><a href="https://github.com/Aaaaaaaty/Blog/blob/master/canvas/canvasParticle/main.js" target="_blank" rel="noopener">原项目地址点击这里查看</a>。</p>
<p>废话不多说，直接教大家如何使用。首先大家在公众号【飞舟技术社区】回复关键字 “<strong>新年粒子动画</strong>“ 获取代码下载地址。</p>
<p>代码下载完成之后，打开终端，进入项目，运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装相关依赖</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">npm i</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 运行项目</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">npm run serve</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 然后直接打开浏览器，输入地址： http://localhost:8080/ 就可以预览效果了。</span></span></pre></td></tr></table></figure>

<p>大家可以根据自己的需要进行修改，主要是两个地方，一个是修改倒计时，一个是修改最终显示的文字，具体参考以下的两个截图。</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1gb7wl3ysqgj20md08v0sr.jpg" alt="倒计时"></p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1gb7wna1qs1j20jq0i8jrq.jpg" alt="文字祝福语"></p>
<p>最后，祝愿大家新年里所有的美好都“鼠”于你。</p>
]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>Canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>vue 中引入 echarts</title>
    <url>/Vue/vueimportecharts/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 环境依赖</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">@vue/cli  4.0.5</span></pre></td></tr><tr><td class="code"><pre><span class="line">echarts  4.5.0</span></pre></td></tr><tr><td class="code"><pre><span class="line">vue  2.6.10</span></pre></td></tr></table></figure>

<h3 id="直接全局引入整个-echarts"><a href="#直接全局引入整个-echarts" class="headerlink" title="直接全局引入整个 echarts"></a>直接全局引入整个 echarts</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一步、安装模块</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">npm install echarts -S</span></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 第二步、引入 echarts</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'echarts'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Vue.prototype.$echarts = echarts</span></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第三步、在组件中使用 --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myChart"</span> <span class="attr">style</span>=<span class="string">"width: 300px; height: 300px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  data () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">  <span class="comment">// 一定要在 mounted 中实例化 echarts 对象，因为我们要确保 dom 元素已经挂载到页面中</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  mounted()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">    <span class="keyword">this</span>.drawLine();</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  methods: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    drawLine()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">        <span class="comment">// 基于准备好的dom，初始化echarts实例</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="javascript">        <span class="keyword">var</span> myChart = <span class="keyword">this</span>.$echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'myChart'</span>))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">        <span class="comment">// 绘制图表</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        myChart.setOption(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">            title: &#123; text: <span class="string">'在Vue中使用echarts'</span> &#125;,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            tooltip: &#123;&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            xAxis: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">                data: [<span class="string">"衬衫"</span>,<span class="string">"羊毛衫"</span>,<span class="string">"雪纺衫"</span>,<span class="string">"裤子"</span>,<span class="string">"高跟鞋"</span>,<span class="string">"袜子"</span>]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            yAxis: &#123;&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            series: [&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">                name: <span class="string">'销量'</span>,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">                type: <span class="string">'bar'</span>,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                data: [5, 20, 36, 10, 10, 20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure>

<p>这种方式最简单，但是也有缺点，因为是引入整个 echarts，所以会导致项目体积很大。如果对代码包的体积要求比较高，可以采用下面的按需引入。</p>
<a id="more"></a>

<h3 id="按需引入"><a href="#按需引入" class="headerlink" title="按需引入"></a>按需引入</h3><p>这种只是将需要用到的 echarts 模块引入，从而可以减少整个项目包的体积。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 echarts 主模块</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 这里之所以使用 require 而不是 import，是因为 require 可以直接从 node_modules 中查找，而 import 必须把路径写全</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> echarts = <span class="built_in">require</span>(<span class="string">'echarts/lib/echarts'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 引入柱状图组件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'echarts/lib/chart/bar'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 引入提示框组件、引入标题组件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'echarts/lib/component/tooltip'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'echarts/lib/component/title'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Vue.prototype.$echarts = echarts;</span></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myChart"</span> <span class="attr">style</span>=<span class="string">"width: 300px; height: 300px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  data () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">  <span class="comment">// 一定要在 mounted 中实例化 echarts 对象，因为我们要确保 dom 元素已经挂载到页面中</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  mounted()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">    <span class="keyword">this</span>.drawLine();</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  methods: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    drawLine()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">        <span class="comment">// 基于准备好的dom，初始化echarts实例</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="javascript">        <span class="keyword">var</span> myChart = <span class="keyword">this</span>.$echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'myChart'</span>))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">        <span class="comment">// 绘制图表</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        myChart.setOption(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">            title: &#123; text: <span class="string">'在Vue中使用echarts'</span> &#125;,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            tooltip: &#123;&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            xAxis: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">                data: [<span class="string">"衬衫"</span>,<span class="string">"羊毛衫"</span>,<span class="string">"雪纺衫"</span>,<span class="string">"裤子"</span>,<span class="string">"高跟鞋"</span>,<span class="string">"袜子"</span>]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            yAxis: &#123;&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            series: [&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">                name: <span class="string">'销量'</span>,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">                type: <span class="string">'bar'</span>,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                data: [5, 20, 36, 10, 10, 20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure>

<p><a href="https://github.com/apache/incubator-echarts/blob/master/index.js" target="_blank" rel="noopener">点击这里查看可以按需引入的模块列表</a></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>ECharts</tag>
        <tag>插件使用</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题精选</title>
    <url>/JavaScript/webfrontenddevelomentmianshiti/</url>
    <content><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="请说说浏览器的缓存策略"><a href="#请说说浏览器的缓存策略" class="headerlink" title="请说说浏览器的缓存策略"></a>请说说浏览器的缓存策略</h3><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><h3 id="从输入网址到看到页面经历了哪些步骤"><a href="#从输入网址到看到页面经历了哪些步骤" class="headerlink" title="从输入网址到看到页面经历了哪些步骤"></a>从输入网址到看到页面经历了哪些步骤</h3><p>TCP三次握手</p>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>两列布局、三列布局</p>
<h3 id="有哪些浏览器端的兼容问题"><a href="#有哪些浏览器端的兼容问题" class="headerlink" title="有哪些浏览器端的兼容问题"></a>有哪些浏览器端的兼容问题</h3><p>IE6双倍外边距、margin重叠。。。</p>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="请讲一下-JavaScript-的执行过程。"><a href="#请讲一下-JavaScript-的执行过程。" class="headerlink" title="请讲一下 JavaScript 的执行过程。"></a>请讲一下 JavaScript 的执行过程。</h3><h3 id="作用域链与引用类型"><a href="#作用域链与引用类型" class="headerlink" title="作用域链与引用类型"></a>作用域链与引用类型</h3><h3 id="this、new"><a href="#this、new" class="headerlink" title="this、new"></a>this、new</h3><h3 id="V8-引擎的回收机制"><a href="#V8-引擎的回收机制" class="headerlink" title="V8 引擎的回收机制"></a>V8 引擎的回收机制</h3><h3 id="深拷贝、浅拷贝"><a href="#深拷贝、浅拷贝" class="headerlink" title="深拷贝、浅拷贝"></a>深拷贝、浅拷贝</h3><h3 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h3><p>分为：浏览器端 Event Loop、nodeJS 的 Event Loop</p>
<h3 id="原型、原型链"><a href="#原型、原型链" class="headerlink" title="原型、原型链"></a>原型、原型链</h3><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><h3 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h3><p>回调函数、Promise、async/await</p>
<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><h3 id="题：请你说一下-Vue-的设计架构。"><a href="#题：请你说一下-Vue-的设计架构。" class="headerlink" title="题：请你说一下 Vue 的设计架构。"></a>题：请你说一下 Vue 的设计架构。</h3><p>vue2 采用的是典型的混入式架构，类似于 express 和 jquery，各个部分分模块开发，再通过一个 mixin 去混入到最终暴露到全局的类上。</p>
<h3 id="Vue3-已经发布了，请你说一下与-Vue2-在响应式的实现上有什么区别？"><a href="#Vue3-已经发布了，请你说一下与-Vue2-在响应式的实现上有什么区别？" class="headerlink" title="Vue3 已经发布了，请你说一下与 Vue2 在响应式的实现上有什么区别？"></a>Vue3 已经发布了，请你说一下与 Vue2 在响应式的实现上有什么区别？</h3><p>Vue2 采用的是 defineProperty 定义 get 与 set，而 Vue3 改用了 proxy。</p>
<h3 id="virtual-DOM-原理"><a href="#virtual-DOM-原理" class="headerlink" title="virtual DOM 原理"></a>virtual DOM 原理</h3><h2 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h2><h3 id="登录流程"><a href="#登录流程" class="headerlink" title="登录流程"></a>登录流程</h3><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="SPA-首屏优化"><a href="#SPA-首屏优化" class="headerlink" title="SPA 首屏优化"></a>SPA 首屏优化</h3><h3 id="图片加载"><a href="#图片加载" class="headerlink" title="图片加载"></a>图片加载</h3><p>懒加载、预加载、骨架屏</p>
<h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><h3 id="请说一下你在这个项目中做的事情。"><a href="#请说一下你在这个项目中做的事情。" class="headerlink" title="请说一下你在这个项目中做的事情。"></a>请说一下你在这个项目中做的事情。</h3><p>【思路】：ssr、组件库、工程化建设、移动混合方案、性能优化方案。</p>
<p>这个项目主体是一个 Vue 项目，但是因为是 PC 端，为了 seo，我特意做了 ssr。然后这个项目有一套我和同事一起做的一个组件库。</p>
<p>在移动端，为了搭配 App，也做了移动混合方案。像在首页，因为数据量大，我们采用了一些优化方案，利用本地存储缓存数据，对小图片进行了 base64 的转码。</p>
<h3 id="说说你在项目中遇到的映像比较深刻的问题？"><a href="#说说你在项目中遇到的映像比较深刻的问题？" class="headerlink" title="说说你在项目中遇到的映像比较深刻的问题？"></a>说说你在项目中遇到的映像比较深刻的问题？</h3><h3 id="你如何管理好团队"><a href="#你如何管理好团队" class="headerlink" title="你如何管理好团队"></a>你如何管理好团队</h3><h3 id="你最擅长的技术"><a href="#你最擅长的技术" class="headerlink" title="你最擅长的技术"></a>你最擅长的技术</h3><h3 id="有没有自己封装过组件、能看一下源码吗？"><a href="#有没有自己封装过组件、能看一下源码吗？" class="headerlink" title="有没有自己封装过组件、能看一下源码吗？"></a>有没有自己封装过组件、能看一下源码吗？</h3>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在vue中引入element？</title>
    <url>/Vue/ruhezaivuezhongyinruelemenyui/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 环境依赖</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">@vue/cli  4.0.5</span></pre></td></tr><tr><td class="code"><pre><span class="line">vue  2.6.10<span class="string">"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">element-ui  2.13.0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">babel-plugin-component  1.1.1</span></span></pre></td></tr></table></figure>

<h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><p>可以直接引入整个 Element ，使用 npm 进行安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i element-ui -S</span></pre></td></tr></table></figure>

<p>然后在 <code>main.js</code> 中加入以下内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span> <span class="comment">// 引入框架</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span> <span class="comment">// 引入样式文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Vue.use(ElementUI) <span class="comment">// 注册</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  el: <span class="string">'#app'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>

<p>然后就可以直接在其他组件使用 Element 了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Home.vue --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">  name: <span class="string">"home"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h3><p>当然也可以只引入需要的组件，以达到减小项目体积的目的。</p>
<p>首先安装一个按需加载的模块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install babel-plugin-component -D</span></pre></td></tr></table></figure>

<p>然后，将根目录下的 <code>babel.config.js</code>修改为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  presets: [<span class="string">"@vue/cli-plugin-babel/preset"</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="string">"plugins"</span>: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    [</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="string">"component"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">"libraryName"</span>: <span class="string">"element-ui"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">"styleLibraryName"</span>: <span class="string">"theme-chalk"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>

<p>如果该文件不存在的话可以直接新建一个，或者新建一个 <code>.babelrc</code> 文件设置以下代码也是可以滴：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  presets: ["@vue/cli-plugin-babel/preset"],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  "plugins": [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    [</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="string">"component"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attr">"libraryName"</span>: <span class="string">"element-ui"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attr">"styleLibraryName"</span>: <span class="string">"theme-chalk"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>上面一步的配置修改好之后，在根目录下新建 <code>./plugins/element.js</code> 文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 如果你只希望引入部分组件，比如 Button 和 Menu，那么就直接引入对应的组件名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Menu, Button &#125; <span class="keyword">from</span> <span class="string">'element-ui'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Vue.use(Menu)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Vue.use(Button)</span></pre></td></tr></table></figure>

<p>然后在 <code>main.js</code> 中引入 <code>element.js</code> 文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./plugins/element'</span> <span class="comment">// 注意只引入该文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  el: <span class="string">'#app'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>

<p>最后直接在需要用到 element 的组件中直接使用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Home.vue --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- 注意：element.js 中引入时是写的 Button，这里做组件使用时要在前面加上 el- --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">  name: <span class="string">"home"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="如何引入-notice-等组件"><a href="#如何引入-notice-等组件" class="headerlink" title="如何引入 notice 等组件"></a>如何引入 notice 等组件</h3><p>如果是全局引入 <code>element-ui</code> ，那么就可以直接在项目中按照以下方式使用 <code>Notification</code>、<code>Message</code>、<code>MessageBox</code> 等：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$notify(options);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$message(options);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$msgbox(options);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$alert(message, title, options) 或 <span class="keyword">this</span>.$alert(message, options)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$confirm(message, title, options) 或 <span class="keyword">this</span>.$confirm(message, options)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$prompt(message, title, options) 或 <span class="keyword">this</span>.$prompt(message, options)</span></pre></td></tr></table></figure>

<p>如果是按需加载引入 <code>element-ui</code> 则在需要用到的组件中进行引用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"login"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;button type=<span class="string">"button"</span> @click=<span class="string">"submitLoginForm"</span>&gt;提交&lt;<span class="regexp">/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/template&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">/</span><span class="regexp">/ 第一步：引入 组件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">import &#123; Notification &#125; from 'element-ui';</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">export default &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">  name: "Login",</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">  data() &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    return &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">      &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    &#125;;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">  &#125;,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">  methods: &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    submitLoginForm() &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">      /</span><span class="regexp">/ 第二步，调用</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">      Notification(&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">        title: '标题',</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">        message: '这是提示文案'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">      &#125;);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">  &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&#125;;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/</span>script&gt;</span></pre></td></tr></table></figure>

<p>也可以直接将 <code>Notification</code> 等方法添加到 Vue 的原型上：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Notification, Message, MessageBox, Loading &#125; <span class="keyword">from</span> <span class="string">'element-ui'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Vue.prototype.$notify = Notification</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// Vue.prototype.$message = Message</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// Vue.prototype.$msgbox = MessageBox</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// Vue.prototype.$alert = MessageBox.alert</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// Vue.prototype.$confirm = MessageBox.confirm</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// Vue.prototype.$prompt = MessageBox.prompt</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// Vue.prototype.$loading = Loading.service</span></span></pre></td></tr></table></figure>

<p>然后直接在其他组件使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$notify(options);</span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>UI框架</tag>
      </tags>
  </entry>
  <entry>
    <title>在vue项目中遇到的bug</title>
    <url>/Vue/howtoresolvevueprojectmeetbug/</url>
    <content><![CDATA[<h3 id="响应式修改数据"><a href="#响应式修改数据" class="headerlink" title="响应式修改数据"></a>响应式修改数据</h3><ul>
<li>基本数据类型直接修改；</li>
<li>数组只能通过以下方法修改：<ul>
<li><code>push()</code></li>
<li><code>pop()</code></li>
<li><code>shift()</code></li>
<li><code>unshift()</code></li>
<li><code>splice()</code></li>
<li><code>sort()</code></li>
<li><code>reverse()</code></li>
<li>使用新数组替换旧数组（map、filter、concat、slice）</li>
<li><code>Vue.set(vm.items, indexOfItem, newValue)</code></li>
<li><code>vm.items.splice(indexOfItem, 1, newValue)</code></li>
</ul>
</li>
<li>对象变更<ul>
<li><code>Vue.set(object, propertyName, value)</code></li>
<li><code>vm.user = Object.assign({}, vm.user, {  age: 27})</code></li>
</ul>
</li>
</ul>
<h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><p>对后台返回的数据进行处理，比如统一添加一个是否选中的字段：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr = arr.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  item.isChecked = <span class="literal">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> item</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="类似详情页回到列表页"><a href="#类似详情页回到列表页" class="headerlink" title="类似详情页回到列表页"></a>类似详情页回到列表页</h3><p>从列表页点击进入详情页后，再从详情页返回列表页时，会回到页面的顶部，并且数据会重新初始化，这是因为组件被销毁然后又重新创建，要想保持原来的滚动位置，就需要利用 <code>keep-alive</code> 组件。</p>
<p>首先在列表页的视图外套上 <code>keep-alive</code> ,利用 <code>include</code> 属性只对列表组件进行缓存：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">'List'</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span></pre></td></tr></table></figure>

<p>然后，在 List 组件内，使用组件内的路由导航守卫 <code>beforeRouteLeave</code> ，在路由离开前，获取滚动高度，并记录在 data 中，当再次进入首页，判断是否存在这个滚动高度，若存在，则设置高度，否则置为 0 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data:&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    listScrollTop : <span class="number">0</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// console.log('leave')</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">let</span> app = <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">this</span>.listScrollTop = app.scrollTop</span></pre></td></tr><tr><td class="code"><pre><span class="line">  next()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">activated() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">'activated home'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>).scrollTop = <span class="keyword">this</span>.homeTop || <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr></table></figure>

<h3 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fd = <span class="keyword">new</span> FormData(); <span class="comment">// 创建 form 对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">fd.append(<span class="string">'data'</span>, e.target.files[<span class="number">0</span>]); <span class="comment">// 通过 append 向 form 对象添加数据  </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">fd.append(<span class="string">'userId'</span>, <span class="number">001</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">axios(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  method: <span class="string">'POST'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  url: <span class="string">'/upload'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  data: fd,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  headers: &#123;<span class="string">'Content-Type'</span>:<span class="string">'multipart/form-data'</span>&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>

<h3 id="如何引入element-ui"><a href="#如何引入element-ui" class="headerlink" title="如何引入element ui"></a>如何引入element ui</h3><p><a href="https://www.faychou.cn/Vue/ruhezaivuezhongyinruelemenyui/">点击这里查看详情</a></p>
<h3 id="如何在-vue-中封装-axios"><a href="#如何在-vue-中封装-axios" class="headerlink" title="如何在 vue 中封装 axios"></a>如何在 vue 中封装 axios</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http.js</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span> <span class="comment">// 引入qs模块，用来序列化post类型的数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Message &#125; <span class="keyword">from</span> <span class="string">'element-ui'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'../router'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../store/index'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 根据环境切换 baseURL</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">axios.defaults.baseURL = process.env.BASE_URL</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 设置请求超时</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">axios.defaults.timeout = <span class="number">10000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// post 默认请求头设置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 请求拦截</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">axios.interceptors.request.use(</span></pre></td></tr><tr><td class="code"><pre><span class="line">  config =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 从 store 中获取 token 并添加到请求头，后台根据 token 判断你的登录情况</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> token = store.getters.userInfo.token</span></pre></td></tr><tr><td class="code"><pre><span class="line">    token &amp;&amp; (config.headers[<span class="string">'Authorization'</span>] = token)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 显示 loading</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    store.dispatch(<span class="string">'changeGlobalState'</span>, &#123; <span class="attr">loading</span>: <span class="literal">true</span> &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> config</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  error =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 响应拦截</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">axios.interceptors.response.use(</span></pre></td></tr><tr><td class="code"><pre><span class="line">  response =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 隐藏 loading</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    store.dispatch(<span class="string">'changeGlobalState'</span>, &#123; <span class="attr">loading</span>: <span class="literal">false</span> &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> response</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 这里可以跟你们的后台开发人员协商好统一的错误状态码    </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 然后根据返回的状态码进行一些操作，例如登录过期提示，错误提示等等</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  error =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (error.response.status) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">switch</span> (error.response.status) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 401: 未登录</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 未登录则跳转登录页面，并携带当前页面的路径</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 在登录成功后返回当前页面，这一步需要在登录页操作。                </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">case</span> <span class="number">401</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Message(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            message: <span class="string">'请先登录'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            type: <span class="string">'warning'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">return</span> router.replace(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            path: <span class="string">'/login'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            query: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">              redirect: router.currentRoute.fullPath</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 403 token 过期</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 登录过期对用户进行提示</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 清除 vuex 中 token</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 跳转登录页面                </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">case</span> <span class="number">403</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Message(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            message: <span class="string">'登录过期，请重新登录'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            type: <span class="string">'warning'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">          store.commit(<span class="string">'loginFail'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="comment">// 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">          setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            router.replace(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">              path: <span class="string">'/login'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">              query: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                redirect: router.currentRoute.fullPath</span></pre></td></tr><tr><td class="code"><pre><span class="line">              &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;, <span class="number">1000</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">return</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 404请求不存在</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">case</span> <span class="number">404</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">return</span> message(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            message: <span class="string">'网络请求不存在'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            type: <span class="string">'warning'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 其他错误，直接抛出错误提示</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">default</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">          message(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            message: error.response.data.message,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            type: <span class="string">'warning'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error.response)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;    </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>

<h3 id="Vue-组件缓存"><a href="#Vue-组件缓存" class="headerlink" title="Vue 组件缓存"></a>Vue 组件缓存</h3><p>使用 <code>keep-alive</code> 包裹「动态组件」时，会缓存不活动的组件实例，而不是销毁它们。这样就可以保留组件的状态。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">"currentTabComponent"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span></pre></td></tr></table></figure>

<p>同时 <code>&lt;keep-alive&gt;</code> 提供了两个属性 <code>include</code> 与 <code>exclude</code>：</p>
<ul>
<li><code>include</code>：只有名称匹配的组件会被缓存。</li>
<li><code>exclude</code>：任何名称匹配的组件都不会被缓存。</li>
</ul>
<p>两个属性都可以用逗号分隔字符串、正则表达式或一个数组来表示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">"a,b"</span>&gt;</span><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">"/a|b/"</span>&gt;</span><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">"['a', 'b']"</span>&gt;</span><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="动态组件切换后不会再次触发-created"><a href="#动态组件切换后不会再次触发-created" class="headerlink" title="动态组件切换后不会再次触发 created"></a>动态组件切换后不会再次触发 created</h3><p>由于通过 <code>&lt;keep-alive&gt;</code> 缓存组件后，vue 不会销毁再创建组件，而是复用这个组件。就会导致 <code>created</code>、<code>mounted</code> 等生命周期不会被触发，当第二次进入该组件时就不会再去获取数据勒，所以可以增加 <code>activated</code>函数，每次进入该组件的时候再获取一次数据。</p>
<p>动态路由也会涉及到这个问题，例如从 <code>/user/foo</code> 导航到 <code>/user/bar</code>，原来的组件实例会被复用。解决的办法是在组件内部利用 watch 来监听 <code>$route</code>  的变化。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  $route (to,<span class="keyword">from</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="comment">// to 表示的是你要去的那个组件，from 表示的是你从哪个组件过来的</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(to, <span class="keyword">from</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>或者使用组件内的 <code>beforeRouteUpdate</code> 导航守卫：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> User = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  template: <span class="string">'...'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 在当前路由改变时调用</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 注意不要忘记调用 next()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="关于刷新导致-vuex-清空"><a href="#关于刷新导致-vuex-清空" class="headerlink" title="关于刷新导致  vuex 清空"></a>关于刷新导致  vuex 清空</h3><p>修改 store 中 state 的定义：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  state: sessionStorage.getItem(<span class="string">'state'</span>) ? <span class="built_in">JSON</span>.parse(sessionStorage.getItem(<span class="string">'state'</span>)): &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    token:<span class="string">''</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>

<p>其次是子路由的数据一定要从当前路由中获取。</p>
<h3 id="组件-name-的作用"><a href="#组件-name-的作用" class="headerlink" title="组件  name 的作用"></a>组件  name 的作用</h3><p>在定义组件时，有一个可选的 <code>name</code> 选项，看起来可有可无，实际上用处也挺大的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: <span class="string">'Home'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>当项目使用 <code>keep-alive</code>时，可搭配组件 <code>name</code> 进行缓存过滤，排除缓存某个组件，从而避免第二次进入该组件后不会调用 <code>created</code> 等生命周期：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">exclude</span>=<span class="string">"Detail"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure>

<p>或者做多级菜单时，递归迭代组件时需要调用自身 <code>name</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 递归组件是指组件自身调用自身 --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in list"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;&#123;item.title&#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"item.children"</span> &gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">item-list</span> <span class="attr">:list</span>=<span class="string">"item.children"</span>&gt;</span><span class="tag">&lt;/<span class="name">item-list</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">    name:<span class="string">'ItemList'</span>,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    props:&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="javascript">        list:<span class="built_in">Array</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure>

<p>还有就是 vue-devtools 调试工具里显示的组见名称就是 name。</p>
<h3 id="Vue-中引入-echarts"><a href="#Vue-中引入-echarts" class="headerlink" title="Vue 中引入 echarts"></a>Vue 中引入 echarts</h3><p><a href="https://www.faychou.cn/Vue/vueimportecharts/">点击这里查看详情</a></p>
<h3 id="Vue-引入-字体图标"><a href="#Vue-引入-字体图标" class="headerlink" title="Vue 引入 字体图标"></a>Vue 引入 字体图标</h3><p>第一步，在 <a href="https://www.iconfont.cn/" target="_blank" rel="noopener">iconfont 官网</a> 选图标，加入购物车，并下载代码；</p>
<p>第二步，在 <code>main.js</code> 中引用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'@/assets/iconfont/iconfont.css'</span></span></pre></td></tr></table></figure>

<p>最后在代码中使用 <code>class=&quot;iconfont icon-XXX&quot;</code> 就可以使用图标了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"iconfont icon-icon-test"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="如何在-Vue-中引入其他-JS"><a href="#如何在-Vue-中引入其他-JS" class="headerlink" title="如何在 Vue 中引入其他 JS"></a>如何在 Vue 中引入其他 JS</h3><p>直接在入口文件 <code>public/index.html</code> 中全局引入：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./static/jquery-1.12.4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="打包时报-console-错误"><a href="#打包时报-console-错误" class="headerlink" title="打包时报 console 错误"></a>打包时报 console 错误</h3><p>运行 <code>npm run build</code> 时，报以下的错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Module Error (from ./node_modules/eslint-loader/index.js):</span></pre></td></tr><tr><td class="code"><pre><span class="line">error: Unexpected console statement (no-console) at src\App.vue:19:5:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  17 |   &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  18 |   <span class="function"><span class="title">created</span></span>() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt; 19 |     console.log(<span class="string">"进入程序"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     |     ^</span></pre></td></tr><tr><td class="code"><pre><span class="line">  20 |   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  21 | &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  22 | &lt;/script&gt;</span></pre></td></tr></table></figure>

<p>大概是说程序中意外的 <code>console.log</code> ，也就是说在打包之前需要移除所有的 <code>console.log</code> ，这个就很坑了，因为不太可能将所有的 <code>console.log</code> 手动删除，太多了，删到天亮都不得行。</p>
<p>解决办法就是在根目录下新建 <code>vue.config.js</code> 文件，然后加入以下内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  configureWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      config.optimization.minimizer[<span class="number">0</span>].options.terserOptions.compress.drop_console = <span class="literal">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>如果上诉操作之后还是打包失败，提示移除 <code>console.log</code> ，比较粗暴的方法就是找到根目录下的 <code>./eslintrc.js</code> ，将以下代码删除或者注释即可：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">'no-console'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'error'</span> : <span class="string">'off'</span>,</span></pre></td></tr></table></figure>

<h3 id="vue-打包后路径问题"><a href="#vue-打包后路径问题" class="headerlink" title="vue 打包后路径问题"></a>vue 打包后路径问题</h3><p>一般情况下通过 <code>npm run build</code> 打包后，直接将 build 文件夹下的所有文件全部丢到后台的静态资源服务器上，就可以正常的访问了。但是开发的事情谁说的准，有时候想要在本地直接预览，或者打包为 APP 的时候，如果直接点击 <code>index.html</code>，打开的网页可能就是一片空白，控制台报一堆的 404。其实这个时候只要看一下打包后的 <code>index.html</code> 文件代码就能知道，所有文件的引入地址都是以<code>/</code>开头的绝对路径，指向 http 服务器的根路径，如下图红色方框所示：</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1g9ho5giwcij20nn0fb74p.jpg" alt=""></p>
<p>要解决这个问题其实也很简单，主要分以下两个方面：</p>
<p><strong>1、解决资源引入错误问题：</strong></p>
<p>在 <code>vue.config.js</code> 中设置 <code>publicPath: &#39;./&#39;</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  publicPath: <span class="string">'./'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这样所有的资源都会被链接为相对路径，这样打出来的包可以被部署在任意路径。</p>
<p><strong>2、解决图片引入问题</strong></p>
<p>方式1、import 进来：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"img"</span>&gt;</span></span></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> img1 <span class="keyword">from</span> <span class="string">'@assets/images/img01.jpg'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  data() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        img: img</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>



<p>方式2、使用 require：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;img :src=<span class="string">"img"</span>&gt; </span></pre></td></tr><tr><td class="code"><pre><span class="line">data() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    img: <span class="built_in">require</span>(<span class="string">'@/assets/img/logo.png'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"require(../assets/img/logo.png)"</span>&gt;</span></span></pre></td></tr></table></figure>



<p>方式3、对于静态的图片：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">"@/assets/img/logo.png"</span>&gt; <span class="comment">// 注意这里要使用 @</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 或者使用网络地址</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">"https://www.faychou.cn/logo.png"</span>&gt;</span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Bugs</tag>
      </tags>
  </entry>
  <entry>
    <title>axios发送post请求java后端无法拿到数据</title>
    <url>/Ajax/axiossendpostandjavareceive/</url>
    <content><![CDATA[<h3 id="场景描述："><a href="#场景描述：" class="headerlink" title="场景描述："></a>场景描述：</h3><p>如果后端是 Java（springmvc），前端使用 jQuery 的 <code>$.ajax</code> 发送 POST 请求，测试接口是没问题的。但是换做使用 axios 来发送 POST 请求，后端却无法获取数据。</p>
<p>问题的主要原因是后端默认接收的 POST 请求头是 <code>Content-Type</code> 设置为 <code>application/x-www-form-urlencoded</code> 的表单请求，参数形式是 <code>key1=value1&amp;key2=value2</code> 这种形式，后端获取使用 <code>@RequestParam</code> 。jQuery 默认的就是这种请求方式，所以使用 <code>$.ajax</code> 发送请求没有问题。</p>
<p>而如果发送 POST 请求时不指定请求头 Request Header，默认使用的 <code>Content-Type</code> 是 <code>text/plain;charset=UTF-8</code> 或者 <code>application/json</code> ，参数出现在 Request payload 块，其参数形式是标准的 Json 格式，所以后台还是使用 <code>@RequestParam</code> 就无法获取到参数，就需要改用 <code>@RequestBody</code> 获取。</p>
<p>在 axios 中使用 POST 发送数据时，默认是直接把 Json 放到请求体中提交到后端的，属于上述的第二种方式。</p>
<h4 id="后端解决方案"><a href="#后端解决方案" class="headerlink" title="后端解决方案"></a>后端解决方案</h4><p>在请求参数使用 <code>@RequestBody</code> 注解替代 <code>@RequestParam</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/save"</span>,method=RequestMethod.POST)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">save</span><span class="params">(@RequestBody Student student)</span></span></span></pre></td></tr></table></figure>

<h4 id="前端解决方案："><a href="#前端解决方案：" class="headerlink" title="前端解决方案："></a>前端解决方案：</h4><p>如果后台处理不了的话，其实这个问题前端同学完全可以自己解决的，其实就是设置请求头而已，以下给出三种方案：</p>
<a id="more"></a>

<p>第一种解决方案、前端添加请求头信息，并重新封装请求参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> params = <span class="string">'username='</span> + <span class="keyword">this</span>.username + <span class="string">'&amp;userpass='</span> + <span class="keyword">this</span>.userpass</span></pre></td></tr><tr><td class="code"><pre><span class="line">axios(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  url: <span class="string">'/api'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  method: <span class="string">'POST'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  headers: &#123; <span class="string">'content-type'</span>: <span class="string">'application/x-www-form-urlencoded'</span> &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  data: params</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>

<p>第二种解决方案、针对第一种方案手动拼接参数很麻烦：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> params = <span class="keyword">new</span> URLSearchParams()</span></pre></td></tr><tr><td class="code"><pre><span class="line">params.append(<span class="string">'username'</span>, <span class="keyword">this</span>.username)</span></pre></td></tr><tr><td class="code"><pre><span class="line">params.append(<span class="string">'userpass'</span>, <span class="keyword">this</span>.userpass)</span></pre></td></tr><tr><td class="code"><pre><span class="line">axios(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  url: <span class="string">'/api'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  method: <span class="string">'POST'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  headers: &#123; <span class="string">'content-type'</span>: <span class="string">'application/x-www-form-urlencoded'</span> &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  data: params</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>

<p>第三种解决方案、利用内置 qs 模块序列化参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">username</span>: <span class="keyword">this</span>.username, <span class="attr">userpass</span>: <span class="keyword">this</span>.userpass &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">axios(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  url: <span class="string">'/api'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  method: <span class="string">'POST'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  headers: &#123; <span class="string">'content-type'</span>: <span class="string">'application/x-www-form-urlencoded'</span> &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  data: qs.stringify(data)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>

<p>当然最好的方式是直接二次封装 axios：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对 axios 进行二次封装</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span> <span class="comment">// 引入 qs 模块，该模块不需要安装，用来序列化 post 类型的数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 添加一个新的 axios 的实例</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = axios.create(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  baseURL: <span class="string">'/api'</span>, <span class="comment">// 统一设置请求地址前缀</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  timeout: <span class="number">6000</span>, <span class="comment">// 请求超时时间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  withCredentials: <span class="literal">true</span> <span class="comment">// 是否允许带 cookie </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 请求拦截，统一在这里处理 POST 数据或者请求时带上 token</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">http.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (config.method === <span class="string">"post"</span>) &#123; <span class="comment">// 这一步主要取决于后端是否可以接受 json</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    config.headers = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="string">'Content-Type'</span>:<span class="string">'application/x-www-form-urlencoded'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 参数序列化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    config.data = qs.stringify(config.data);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 获取 token</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> token = sessionStorage.getItem(<span class="string">'token'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(token) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// ...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> config;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 响应拦截，处理错误， 如 token 不合法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">http.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// ...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> response;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// ...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> http</span></pre></td></tr></table></figure>

<p>这样前端请求还是按照原来的写法直接给 data 传递对象即可，因为每次请求的时候都会自动转换参数形式。</p>
<p>参考文章：<a href="https://blog.csdn.net/zjz_zzzz/article/details/82753472" target="_blank" rel="noopener">https://blog.csdn.net/zjz_zzzz/article/details/82753472</a></p>
]]></content>
      <categories>
        <category>Ajax</category>
      </categories>
      <tags>
        <tag>axios</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue 移动端适配及打包为 APP</title>
    <url>/%E7%A7%BB%E5%8A%A8%E7%AB%AF/vuemobileandapp/</url>
    <content><![CDATA[<blockquote>
<p>环境依赖:</p>
<p>@vue/cli  4.0.5</p>
<p>vue  2.6.10</p>
<p>amfe-flexible  2.2.1</p>
<p>postcss-pxtorem  4.0.1</p>
</blockquote>
<p>在 小程序、RN、Flutter 大行其道的环境下，为什么今天还要给大家聊聊网页版的移动布局，只能说各有各的需求。</p>
<p>设计师在提供设计图时，一般只提供一个分辨率的 UI 图。如果严格按照这个图去设置各个元素的 px 值，那么在不同宽度的手机上界面很容易会发生变形。对前端的挑战是如何通过一套代码去适配各种宽度的手机，而这个并不是我们以前惯用的响应式就可以解决的。</p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>像素是指计算机能够显示一种特定颜色的最小区域。在设备尺寸相同的情况下，像素越密集，屏幕能显示的画面就越清晰。</p>
<p><strong>ppi</strong>：是指屏幕上每英寸可以显示的像素点的数量，即屏幕像素密度。</p>
<p><strong>设备像素</strong>(device independent pixels): 设备屏幕的物理像素，是硬件固有的像素。</p>
<p><strong>CSS像素</strong>(CSS pixels): 又称为逻辑像素，是通过算法实现的，为 web 开发者创造。</p>
<p><strong>dpr</strong>(devicePixelRatio)：是物理像素与逻辑像素的比，也称为设备像素比。</p>
<p>dpr 的出现是苹果公司在 iphone4 产品中推出了所谓的 retina 视网膜屏幕。之所以叫做视网膜屏幕，是因为屏幕的 ppi 太高，人的视网膜无法分辨出屏幕上的像素点。在保持屏幕尺寸大小不变的情况下将物理分辨率提高了一倍，这意味着同样大小的屏幕上，像素多了一倍。</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1g9ik7qklhcg20q70f9q32.gif" alt="原谅我的懒惰盗张图"></p>
<a id="more"></a>

<p>一般情况下 PC 端网页的1个 CSS 像素是对应着电脑屏幕的1个物理像素，而在手机端，由于屏幕尺寸的限制，一个元素的 CSS 像素（如 width: 200px;）是始终不变的，而一个 CSS 像素对应多少个物理像素是与 ppi 有关的。</p>
<p>以 iphone6 的尺寸为例，CSS像素为 <code>375*667</code>，dpr 为2，那么其设备像素就是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">375 * 2 = 750</span></pre></td></tr><tr><td class="code"><pre><span class="line">667 * 2 = 1334</span></pre></td></tr></table></figure>

<p>这就是为什么设计师在画图时以 iphone6 为参考，设计出的尺寸大小为 <code>750*1334</code> 的原因。</p>
<p>而前端同学根据一个 UI 图要做到能够适配不同的手机尺寸大小，就要求所使用的 CSS 单位能在不同设备上自动缩放，以达到同一元素在不同设备上的占比是一样的。除了使用兼容性不是很好的 vw 方案外，还可以参考手淘网给出的解决方案 <a href="https://github.com/amfe/article/issues/17" target="_blank" rel="noopener">具体详情可以点击这里查看…</a>。</p>
<p>使用 rem 替代 px，因为 rem 是相对于根标签的字体大小的，只要在不同的设备上根据 dpr 的值去修改根标签的字体大小，这样 rem 的大小也会跟着一起改变，从而实现自适应不同的设备。</p>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>为了解决每次将设计稿上的 px 转为对应的 rem 所带来的计算问题，以下给出一个 postcss 的解决方案：</p>
<p>第一步、安装相关依赖模块；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i amfe-flexible --save // 适配方案，会自动根据设备去修改根标签字体大小</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm i postcss-pxtorem --save-dev     // 把 px 转换成对应的 rem</span></pre></td></tr></table></figure>

<p>在项目根目录下找到 public 下的 index.html 文件，在 head 中相应位置添加以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1"</span>&gt;</span></span></pre></td></tr></table></figure>

<p>第二步、在 main.js 中引入 适配文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'amfe-flexible'</span></span></pre></td></tr></table></figure>

<!-- more -->

<p>第三步、在项目根目录下创建 vue.config.js 配置文件:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pxtorem = <span class="built_in">require</span>(<span class="string">'postcss-pxtorem'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    css: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        loaderOptions: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          css: &#123;&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          postcss: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            plugins: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">              autoprefixer(),</span></pre></td></tr><tr><td class="code"><pre><span class="line">              pxtorem(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                rootValue: <span class="number">75</span>, <span class="comment">// 基准值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                propList: [<span class="string">'*'</span>] <span class="comment">// 决定哪些属性值自动转换，如：propList: ['font', 'font-size', 'line-height', 'letter-spacing'],</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">              &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>上方的 rootValue 是基准值，假如设计图给的宽度是 750，通常就会把 rootValue 设置为75，这样写样式时，可以直接按照设计图标注的宽高来 1:1 还原，如：设计图上图片大小为 300 像素，那我们在代码里也直接写 300px 。完成配置修改后，重启服务器即可。</p>
<p>如果在项目中使用了 vant 等第三方的 UI 框架，因为这些第三方框架没有兼容 rem，用的依旧是 px 单位，所以 <code>rootValue</code> 的值要设置为设计图宽度 75 的一半，即 <code>37.5</code>，这样才可以 <code>1:1</code> 还原 vant 的组件，否则会样式会有变化。那么相应的在写样式时，也将值改为设计图的一半。</p>
<p><a href="https://github.com/faychou/code-example/tree/master/vue-example/vue-mobile-adapter" target="_blank" rel="noopener">项目源码</a></p>
<h3 id="如何将-web-页面打包为-APP"><a href="#如何将-web-页面打包为-APP" class="headerlink" title="如何将 web 页面打包为 APP"></a>如何将 web 页面打包为 APP</h3><p>有时候公司为了节约开发成本，想将现成的 web app 直接发布为 Native APP ，怎么办勒？首先这个是可行的，对前端来说实现起来也比较简单。</p>
<h3 id="build-项目"><a href="#build-项目" class="headerlink" title="build 项目"></a>build 项目</h3><p>首先需要将开发完毕的 vue  项目打包出来，但是在这一步之前，需要修改一下打包配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在根目录下新建 vue.config.js</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  publicPath: <span class="string">'./'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>如果项目中使用了 <code>vue-router</code>，最好将路由模式修改为 <code>hash</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改路由的配置 ./router/index.js</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// mode: 'history',如果有这句代码就直接删除</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  base: process.env.BASE_URL,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  routes</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>

<p>然后运行以下命令打包程序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span></pre></td></tr></table></figure>

<p>这时就会在根目录下生成 dist 目录，该目录下就是最终的程序。</p>
<h3 id="创建-APP-项目"><a href="#创建-APP-项目" class="headerlink" title="创建 APP 项目"></a>创建 APP 项目</h3><p>我这里以最新的 Hbuilder X 为例来讲解，如果没有安装这个工具，直接 <a href="https://www.dcloud.io/hbuilderx.html" target="_blank" rel="noopener">点击这里下载</a> 。打开 Hbuilder X，选择菜单上的：文件 -&gt; 新建 -&gt; 项目</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1g9hpotn68hj20mc0hcdfx.jpg" alt="创建移动项目"></p>
<p>创建之后的项目结构如下：</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1g9hphuju4mj208005lq2q.jpg" alt="项目解构"></p>
<p>除了 <code>unpackage</code>（是放置app图标和启动界面的图片，自动生成） 和 <code>manifest.json</code>（移动APP的配置文件）外，其他的文件和文件夹可以全部删掉，然后将上一步打包好的 dist 文件夹下所有的文件及文件夹复制过来。</p>
<p>其实这一步最关键的在于 <code>manifest.json</code> 文件，只要有该文件，基本可以将大部分的 web 应用打包为 APP。</p>
<h3 id="生成-APP"><a href="#生成-APP" class="headerlink" title="生成 APP"></a>生成 APP</h3><p>第一步、配置 <code>manifest.json</code> 文件，这里主要配置应用名称，应用标识（注册之后会自动生成的），应用的图标等，其他的看项目情况配置：</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1g9il01kj0lj21870ns751.jpg" alt="manifest配置"></p>
<p>第二步、点击上方菜单：发行 –&gt; 原生App-云打包，简单配置打包信息：</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1g9hpm3m2gdj20ic0lt0t1.jpg" alt=""></p>
<p>在这里简单的配置 app 的信息，因为涉及到证书的问题，这里就只勾选了 Android 包，然后选择公共测试证书，将广告联盟的勾全部去掉，其他就可以不设置了，直接点击打包按钮。</p>
<p>打包完成后，在下方的控制台就会有提示，根据返回的链接就可以直接下载程序进行测试了。</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1g9hpnplhotj2153095mxd.jpg" alt=""></p>
<h3 id="解决打包成-APP-后，按手机返回键退出应用的-bug"><a href="#解决打包成-APP-后，按手机返回键退出应用的-bug" class="headerlink" title="解决打包成 APP 后，按手机返回键退出应用的 bug"></a>解决打包成 APP 后，按手机返回键退出应用的 bug</h3><p>将以下代码加入到打包后的 <code>index.html</code> 中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="javascript">  <span class="built_in">document</span>.addEventListener(<span class="string">'plusready'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123; <span class="comment">// 等待 plus ready 后再调用 5+ API：</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">    <span class="comment">// 在这里调用 5+ API</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">    <span class="keyword">var</span> first = <span class="literal">null</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">    plus.key.addEventListener(<span class="string">'backbutton'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123; <span class="comment">// 监听返回键</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">      <span class="comment">// 首次按键，提示‘再按一次退出应用’</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      if (!first) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="javascript">        first = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(); <span class="comment">// 获取第一次点击的时间戳</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">        <span class="comment">// console.log('再按一次退出应用');</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">        plus.nativeUI.toast(<span class="string">"双击退出"</span>, &#123;duration:<span class="string">'short'</span>&#125;); <span class="comment">// 通过 H5+ API 调用 Android 上的toast 提示框</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">        setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">          first = <span class="literal">null</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;, 1000);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">      &#125; <span class="keyword">else</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - first &lt; <span class="number">1000</span>) &#123; <span class="comment">// 获取第二次点击的时间戳, 两次之差 小于 1000ms 说明1s点击了两次,</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">          plus.runtime.quit(); <span class="comment">//退出应用</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">    &#125;, <span class="literal">false</span>);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>布局</tag>
        <tag>vue</tag>
        <tag>app</tag>
      </tags>
  </entry>
  <entry>
    <title>如何解决 AJAX 跨域</title>
    <url>/Ajax/resolveajaxcross/</url>
    <content><![CDATA[<p>在开发中有一个无法避免的问题，那就是请求跨域，产生的原因是因为浏览器的“同源策略”，所谓的同源就是指：</p>
<ul>
<li>协议，例：http 和 https</li>
</ul>
<ul>
<li>域名，例：faychou.com 和 faychou.cn</li>
<li>端口，例：80 和 8080</li>
</ul>
<p>同源策略的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。</p>
<p>而跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，那就会发生跨域。</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1g9evpgeankj20eo05fq2y.jpg" alt="跨域错误"></p>
<p>解决跨域的方案有很多种，这里主要介绍其中比较常用的。</p>
<a id="more"></a>

<h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>JSONP 实现的原理是因为 script 标签的 src 是具有跨域访问文件的能力，就可以通过动态创建 script 标签的方式，创建指定的地址，服务器收到请求后，将数据放在一个指定名字的回调函数里传回来。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JS</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonP</span>(<span class="params">src</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  script.src = src;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">document</span>.body.appendChild(script);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">res</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">"这里是服务器返回的信息："</span>, <span class="built_in">JSON</span>.stringify(res));</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">list.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  jsonP(<span class="string">'http://www.faychou.com/api?callback=fn'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 基于 jQuery</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  url: <span class="string">'http://www.faychou.com/api'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  dataType: <span class="string">'jsonp'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  jsonpCallback: <span class="string">'callback'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<p>这是以前较为常用的手段，而且兼容性非常高，但是缺点也很明显，只支持 GET 请求。目前使用的较少了。</p>
<h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>CORS（Cross-Origin Resource Sharing）中文名叫 跨域资源共享，属于 W3C 标准，目前浏览器基本都支持该方案，相比 JSONP 只能发 GET 请求，CORS 允许任何类型的请求，也是现在主流的跨越解决方案之一。</p>
<blockquote>
<p> 注意：该方案前端几乎不需要做任何的设置，由后台进行处理，如 nodejs 的实现：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// express</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">app.all(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>); <span class="comment">// 允许访问的域，* 代表所有，生产环境建议填写具体的域名，如 http://www.faychou.com</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  res.header(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type,X-Requested-With,Accept,Authorization"</span>); <span class="comment">// 表示服务器将会支持的请求头部值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  res.header(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"PUT,POST,GET,DELETE,OPTIONS"</span>); <span class="comment">// 允许的请求方式</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  res.header(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="string">'true'</span>); <span class="comment">// 和客户端对应，必须设置以后，才能接收cookie</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  next(); <span class="comment">// 交给后面的中间件继续处理</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 在这之后，处理 API</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">app.use(<span class="string">"/"</span>, indexRouter)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span></pre></td></tr></table></figure>

<h3 id="nginx-反向代理"><a href="#nginx-反向代理" class="headerlink" title="nginx 反向代理"></a>nginx 反向代理</h3><p>通过 nginx 配置一个代理服务器做跳板机，反向代理访问服务器接口，一般用于生产环境。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">server_name</span> https://www.faychou.cn;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">location</span> / &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">proxy_pass</span>   http://127.0.0.1:8080;  <span class="comment"># 反向代理</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>:<span class="number">80</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="devServe-反向代理"><a href="#devServe-反向代理" class="headerlink" title="devServe 反向代理"></a>devServe 反向代理</h3><p>每次开发中总是去麻烦后台，也是很不方便的，所以在开发阶段，前端完全可以自己解决跨域，主要依赖 webpack 的插件 devServer，具体配置如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    entry: &#123;&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">module</span>: &#123;&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">    devServer: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      historyApiFallback: <span class="literal">true</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      proxy: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">'/api'</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          target: <span class="string">'http://www.faychou'</span>, <span class="comment">// 服务器地址</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">          pathRewrite: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">'^/api'</span>: <span class="string">''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          changeOrigin: <span class="literal">true</span>, <span class="comment">// 本地会虚拟一个服务端接收你的请求并代你发送该请求</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">          secure: <span class="literal">false</span>  <span class="comment">// 当代理某些 https 服务时用</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>目前接触的 vue 项目比较多，通过 vue-cli 搭建的开发环境，是将 webpack 的配置文件隐藏起来的，此时要设置反向代理，就需要在项目的根目录下创建 <code>vue.config.js</code> 文件，然后做以下配置，也是很容易解决的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  devServer: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    proxy: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="string">'/api'</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        target: <span class="string">'http://www.faychou'</span>, <span class="comment">// 服务器地址</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        pathRewrite: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="string">'^/api'</span>: <span class="string">''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        changeOrigin: <span class="literal">true</span>, <span class="comment">// 本地会虚拟一个服务端接收你的请求并代你发送该请求</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        secure: <span class="literal">false</span>  <span class="comment">// 当代理某些 https 服务时用</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>上面的 <code>pathRewrite</code> 的配置理解为前端请求地址中使用 <code>/api</code> 替代 <code>target</code> 中的地址，比如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// login.vue</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.axios.post(<span class="string">'/api/login'</span>, &#123;&#125;) </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 那么实际请求地址为 http://www.faychou/login</span></span></pre></td></tr></table></figure>

<p>好了，今天的跨域解决方案，就先讲到这里，不知道大家 get 到了没有。</p>
]]></content>
      <categories>
        <category>Ajax</category>
      </categories>
      <tags>
        <tag>ajax</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>vue环境搭建</title>
    <url>/Vue/vuehuanjingdajian/</url>
    <content><![CDATA[<p>vue-cli 是 vue 官方的一个快速开发工具，可用于快速搭建大型单页应用。目前最新的 vue-cli 已经改名为 @vue/cli 了。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>打开终端（cmd）执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 如果安装了 yarn 则可以使用这条命令</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">yarn add global @vue/cli</span></pre></td></tr></table></figure>

<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue create &lt;project-name&gt;</span></pre></td></tr></table></figure>

<p><code>&lt;project-name&gt;</code> 这里填写项目的名字（非中文），然后根据提示选择即可，注意新版本把插件以及模板等移植到命令行界面了。</p>
<p>当第一次选择的时候有两个选项（版本不同可能有细微差别）：default(默认配置) 和 Manually select features(自定义配置)。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Vue CLI v4.0.5</span></pre></td></tr><tr><td class="code"><pre><span class="line">? Please pick a preset:    </span></pre></td></tr><tr><td class="code"><pre><span class="line">  default (babel, eslint)  </span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt; Manually select features</span></pre></td></tr></table></figure>

<p>default 的配置我就不说了，基本没有修改的地方，主要讲一下 Manually select features ，通过键盘上下方向键，选中 Manually select features 然后敲击回车进入下一步：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">? Please pick a preset: Manually select features</span></pre></td></tr><tr><td class="code"><pre><span class="line">? Check the features needed <span class="keyword">for</span> your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;(*) Babel</span></pre></td></tr><tr><td class="code"><pre><span class="line"> ( ) TypeScript</span></pre></td></tr><tr><td class="code"><pre><span class="line"> (*) Progressive Web App (PWA) Support</span></pre></td></tr><tr><td class="code"><pre><span class="line"> ( ) Router</span></pre></td></tr><tr><td class="code"><pre><span class="line"> ( ) Vuex</span></pre></td></tr><tr><td class="code"><pre><span class="line"> (*) CSS Pre-processors</span></pre></td></tr><tr><td class="code"><pre><span class="line"> (*) Linter / Formatter</span></pre></td></tr><tr><td class="code"><pre><span class="line"> ( ) Unit Testing</span></pre></td></tr><tr><td class="code"><pre><span class="line"> ( ) E2E Testing</span></pre></td></tr></table></figure>

<a id="more"></a>

<p>这里是用于选择你需要用到的插件，通过上下方向键移动，然后敲空格键选择，选完之后按回车，这里选择的插件不同，下一步会根据你选择的插件进行配置，所以下一步的界面也会有细微的不同，我这里就不详细说明，直接贴上我的选择：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Vue CLI v4.0.5</span></pre></td></tr><tr><td class="code"><pre><span class="line">? Please pick a preset: Manually select features</span></pre></td></tr><tr><td class="code"><pre><span class="line">? Check the features needed <span class="keyword">for</span> your project: Babel, PWA, Router, CSS Pre-processors, Linter</span></pre></td></tr><tr><td class="code"><pre><span class="line">? Use <span class="built_in">history</span> mode <span class="keyword">for</span> router? (Requires proper server setup <span class="keyword">for</span> index fallback <span class="keyword">in</span> production) Yes</span></pre></td></tr><tr><td class="code"><pre><span class="line">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): Sass/SCSS (with node-sass)</span></pre></td></tr><tr><td class="code"><pre><span class="line">? Pick a linter / formatter config: Basic</span></pre></td></tr><tr><td class="code"><pre><span class="line">? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)Lint on save</span></pre></td></tr><tr><td class="code"><pre><span class="line">? Where <span class="keyword">do</span> you prefer placing config <span class="keyword">for</span> Babel, PostCSS, ESLint, etc.? In dedicated config files</span></pre></td></tr><tr><td class="code"><pre><span class="line">? Save this as a preset <span class="keyword">for</span> future projects? No</span></pre></td></tr></table></figure>

<p>最后设置完毕后，就会进行环境安装，耐心等待即可。</p>
<h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><p>装好之后，就可以直接运行项目了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先进入项目</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> project-name</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 然后运行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">npm run serve</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># or</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">yarn serve</span></pre></td></tr></table></figure>

<p>然后根据终端的提示，打开地址预览（一般是 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> ）。</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1g9evtrjmxcj213q0kljrm.jpg" alt="预览效果图"></p>
<p>如果看到这样的界面，就说明环境搭建成功。</p>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>在现有的项目中安装插件，可以使用 <code>vue add</code>命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue add eslint</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 会解析为完整的包名 @vue/cli-plugin-eslint</span></span></pre></td></tr></table></figure>

<p>如果安装的插件不存在，则会失败。</p>
<p>另外 vue add 中还有两个特例，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 vue-router</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">vue add router</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 vuex</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">vue add vuex</span></pre></td></tr></table></figure>

<p>这两个命令会直接安装 vue-router 和 vuex 并改变你的代码结构。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>与vue-cli2.0 的很大区别是根目录下的 webpack 配置的目录不见了，如果需要自定义配置，则需要在根目录下创建 <code>vue.config.js</code> 文件，包括了配置 常用的输出路径名、跟目录、预处理、devServer 配置、pwa、dll、第三方插件等。更详细的可以查看官网配置。 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">module</span>.exports = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 去掉文件名中的 hash</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    filenameHashing: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 如果你的应用被部署在 https://www.faychou.cn/my-app/，则设置 publicPath 为 /my-app/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    publicPath: <span class="string">'/'</span>, <span class="comment">// 部署应用包时的基本 URL，Default: '/'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// publicPath: '/blog' 如果部署到 https://www.faychou.cn/blog</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    outputDir: <span class="string">'dist'</span>, <span class="comment">// 生产环境构建文件的目录，Default: 'dist'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    assetsDir: <span class="string">''</span>, <span class="comment">// 放置生成的静态资源 (js、css、img、fonts) 的 (相对于 outputDir 的) 目录，默认 ''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    devServer: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      proxy: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">'/api'</span>: &#123; <span class="comment">// 请求中不带 api</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">          target: <span class="string">'http://localhost:3131'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          pathRewrite: &#123;<span class="string">'^/api'</span> : <span class="string">''</span>&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr></table></figure>

<h3 id="图形化界面"><a href="#图形化界面" class="headerlink" title="图形化界面"></a>图形化界面</h3><p>vue-cli 3.0 及以上版本有个最大的特点在于实现了图形界面化创建和操作项目，所以上面的方法大家理解起来很费劲的话，直接看这个部分也是可以滴。</p>
<p>依旧需要在终端中运行一条命令，用于启动，但是相对以上来讲，很简单了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue ui</span></pre></td></tr></table></figure>

<p>启动成功后就会看到这样的界面：</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1g9evtsx5yhj216m0ec747.jpg" alt="项目管理主页"></p>
<p>分为三个部分，这个很容易理解的，我们选择中间的创建按钮，设置项目所在目录后，直接点击下方的创建：</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1g9evtrvx16j21530jxweo.jpg" alt="选择项目路径"></p>
<p>设置好项目名字，点击下一步：</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1g9evtrlulbj20yz0k30t1.jpg" alt="项目信息设置"></p>
<p>选择手动配置，下一步：</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1g9evtrk3dhj21380jswer.jpg" alt="配置方式选择"></p>
<p>根据项目情况有选择的设置即可：</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1g9evtrp85bj213z0i7mxn.jpg" alt="选择插件"></p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1g9evtrsr81j212n0a5mxb.jpg" alt="选择插件2"></p>
<p>根据配置不同，这里会有细微差别：</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1g9evtrnjxfj211y0jrt98.jpg" alt="插件配置"></p>
<p>最后一步，就是询问你是否将这次的配置信息保存为一个模板，下次再创建 vue 项目时，就可以在第一步时直接选择这次的配置，我一般不保存。</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1g9evts0110j20yc0hjq3g.jpg" alt="是否保存模板"></p>
<p>到这里，环境配置就结束了，静态片刻之后，就可以直接运行项目。</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1g9evts9ftfj218a0kvjs3.jpg" alt="新项目主页"></p>
<p>在该界面中就可以查看当前依赖，添加新的插件，或者修改项目的配置信息，如果要运行项目，参照以下步骤即可完成。</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1g9evtsbkxaj21890kwta2.jpg" alt="运行项目"></p>
<h3 id="零配置启动"><a href="#零配置启动" class="headerlink" title="零配置启动"></a>零配置启动</h3><p>最后讲一个零配置的环境搭建，第一步安装模块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli-service-global</span></pre></td></tr></table></figure>

<p>第二步：新建文件夹，并建立 app.vue：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;h1&gt; &#123;&#123;msg&#125;&#125; &lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  export default &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    data: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      msg: &#39;hello world!&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;</span></pre></td></tr></table></figure>

<p>第三步，启动文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue serve App.vue <span class="comment"># 启动服务</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">vue build App.vue <span class="comment"># 打包出生产环境的包并用来部署</span></span></pre></td></tr></table></figure>

<p>通过这个功能，可以只用一个 vue 文件就能建立一个项目，不需要其他任意的配置，非常适合用于开发一个库、组件，做一些小 demo 等。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue/cli</tag>
      </tags>
  </entry>
  <entry>
    <title>10道经典面试题</title>
    <url>/JavaScript/10-jingdianmianshiti/</url>
    <content><![CDATA[<h3 id="第一题、以下输出结果是什么？"><a href="#第一题、以下输出结果是什么？" class="headerlink" title="第一题、以下输出结果是什么？"></a>第一题、以下输出结果是什么？</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'window name'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">'undefined'</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> name = <span class="string">'Fay Chou'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)(); <span class="comment">// Fay Chou</span></span></pre></td></tr></table></figure>

<p>解析：这道题主要考察的还是变量提升，通过关键字 <code>var</code> 声明的变量，会被提升至当前作用域的顶部，也就是第4行代码 name 的声明会升至当前函数的顶部，但是赋值的位置不变。</p>
<h3 id="第二题、思考以下代码会在控制台打印出什么？"><a href="#第二题、思考以下代码会在控制台打印出什么？" class="headerlink" title="第二题、思考以下代码会在控制台打印出什么？"></a>第二题、思考以下代码会在控制台打印出什么？</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> a = b = <span class="number">5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 5</span></span></pre></td></tr></table></figure>

<a id="more"></a>

<p>解析：在函数的内部，有两个变量，其中变量 a 的前面加了关键字 <code>var</code> 进行声明，说明该变量是局部变量，但是变量 b 是没有加关键字的，即是全局变量，所以第二行代码实际上等价于 <code>var a = window.b = 5</code>。</p>
<h3 id="第三题、以下代码的结果是什么？"><a href="#第三题、以下代码的结果是什么？" class="headerlink" title="第三题、以下代码的结果是什么？"></a>第三题、以下代码的结果是什么？</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'window name'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: <span class="string">'Chou'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  child: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    name: <span class="string">'Fay Chou'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person.child.getName()); <span class="comment">// Fay Chou</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test = person.child.getName;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(test()); <span class="comment">// window name</span></span></pre></td></tr></table></figure>

<p>解析：要理解 <code>this</code> 的指向，必须看是谁在调用当前函数，直接找距离当前函数最近的对象，在第一个 <code>console.log</code> 中距离 <code>getName()</code> 最近的是 child 这个对象，所以 <code>getName</code>是作为该对象的方法，这里的上下文环境指就指向 child。相反，当 <code>getName</code> 被赋值为全局变量 test 时，此时的上下文环境就切换为 window 对象了。因为 test 是全局对象的一个属性。</p>
<h3 id="第四题、以下代码会输出什么？"><a href="#第四题、以下代码会输出什么？" class="headerlink" title="第四题、以下代码会输出什么？"></a>第四题、以下代码会输出什么？</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  x: <span class="number">1</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">console</span>.log(that.x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">foo.bar(); <span class="comment">// 1 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">foo.bar()(); <span class="comment">// 分别输出  this: 0 和 that: 1</span></span></pre></td></tr></table></figure>

<p>解析：第一个输出很容易理解，bar 函数由 foo 对象调用，所以里面的 this 指向 foo；再注意观察，bar 函数中返回了一个匿名函数，这个匿名函数可以在外部被调用，也就是 <code>foo.bar()()</code>，所以返回的匿名函数中的 this 就会指向 window，同时匿名函数可以读取到 bar 函数的内部变量 that ，最终形成了一个闭包。</p>
<h3 id="第五题、以下代码依次输出结果"><a href="#第五题、以下代码依次输出结果" class="headerlink" title="第五题、以下代码依次输出结果"></a>第五题、以下代码依次输出结果</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">"1"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Foo.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// getName 是一个静态方法，只能由 Foo 函数调用</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">"2"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Foo.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">"3"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">"4"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">"5"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Foo.getName(); <span class="comment">// 2，解析：直接调用 Foo 函数的静态方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">getName(); <span class="comment">// 4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Foo().getName(); <span class="comment">// 1，解析：调用 Foo 函数没有加 new，说明直接当普通函数，则内部返回的 this 指向 window，而第2行代码在重新为全局变量 getName 赋值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">getName(); <span class="comment">// 1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Foo.getName(); <span class="comment">//  2，解析：相当于执行函数 Foo.getName</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Foo().getName(); <span class="comment">// 3，解析：相当于(new Foo()).getName()，先执行实例化，然后调用原型上的方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> Foo().getName(); <span class="comment">// 3，解析：相当于 new (new Foo()).getName()，是对Foo().getName这个函数进行了实例化，结果同上</span></span></pre></td></tr></table></figure>

<p>解析：看上方代码注释。</p>
<h3 id="第六题、以下代码执行结果是？"><a href="#第六题、以下代码执行结果是？" class="headerlink" title="第六题、以下代码执行结果是？"></a>第六题、以下代码执行结果是？</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">"create a promise"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  resolve(<span class="string">"success"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"after a new Promise"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// "create a promise"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// "after a new Promise"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// "success"</span></span></pre></td></tr></table></figure>

<p>解析：这个还是比较容易理解的，<code>new Promise</code> 其实还是同步执行的，所以最先输出 <code>create a promise</code>，而 <code>then</code>方法中的回调函数则是异步的。</p>
<h3 id="第七题、在来看看以下代码的执行结果？"><a href="#第七题、在来看看以下代码的执行结果？" class="headerlink" title="第七题、在来看看以下代码的执行结果？"></a>第七题、在来看看以下代码的执行结果？</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'1111'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'4444'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(<span class="string">'5555'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        resolve();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(<span class="string">'6666'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2222'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    resolve();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'3333'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'7777'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(<span class="string">'8888'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        resolve();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(<span class="string">'9999'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// '1111'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// '2222'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// '3333'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// '4444'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// '5555'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// '6666'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// '7777'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// '8888'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// '9999'</span></span></pre></td></tr></table></figure>

<p>解析：要理解这道题，必须要先了解 JS 的 Event Loop，代码的执行分为同步和异步，同步执行完毕后才会执行异步，这个大家应该都了解，但是异步任务实际上还分为微任务（Promise 等）和宏任务（包含 setTimeout、setInterval 等），每次先执行同步任务，然后检查微任务，将可执行的微任务全部执行完毕，然后取宏任务队列中的第一项执行。然后重复执行上面的步骤，即清空微任务，执行一个宏任务，然后检查微任务，再执行一个宏任务。</p>
<h3 id="第八题、最后输出的结果"><a href="#第八题、最后输出的结果" class="headerlink" title="第八题、最后输出的结果"></a>第八题、最后输出的结果</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>; </span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> obt = &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">   a: <span class="number">20</span>, </span></pre></td></tr><tr><td class="code"><pre><span class="line">   fn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="keyword">var</span> a = <span class="number">30</span>; </span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125; </span></pre></td></tr><tr><td class="code"><pre><span class="line"> &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> obt.fn();  <span class="comment">// 20</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"> obt.fn.call(); <span class="comment">// 10，解析：call 用来修改函数的 this 指向的，如果没有提供第一个参数，则指向全局对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"> (obt.fn)(); <span class="comment">// 20</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"> (obt.fn, obt.fn)(); <span class="comment">// 10，解析：这是 JS 逗号运算符</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="keyword">new</span> obt.fn(); <span class="comment">// undefined，解析：把 obt.fn 当作构造函数来使用</span></span></pre></td></tr></table></figure>

<h3 id="第九题、最后的输出结果是多少"><a href="#第九题、最后的输出结果是多少" class="headerlink" title="第九题、最后的输出结果是多少?"></a>第九题、最后的输出结果是多少?</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> length = <span class="number">10</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.length);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  length: <span class="number">5</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  method: <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fn();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>]();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">obj.method(fn, <span class="number">1</span>); <span class="comment">// 10， 2</span></span></pre></td></tr></table></figure>

<p>解析：实际上<code>arguments[0]()</code>这段代码调用了 <code>obj.method</code> 的第一个实参 fn，此时 fn 的作用域就绑定到了 arguments 上，this 也就是指向了 arguments 对象，则 <code>this.length</code> 就等于 <code>arguments.length</code>，又因为 method 传入的参数为2个，所以最后输出2。</p>
<h3 id="第十题、下面代码的输出是什么"><a href="#第十题、下面代码的输出是什么" class="headerlink" title="第十题、下面代码的输出是什么?"></a>第十题、下面代码的输出是什么?</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAge</span>(<span class="params">data</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (data === &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">"You are an adult!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Maybe you are a child`</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">checkAge(&#123; <span class="attr">age</span>: <span class="number">18</span> &#125;); <span class="comment">// Maybe you are a child</span></span></pre></td></tr></table></figure>

<p>解析：解答这道题，我们一定要了解 JS 变量存储的位置，基本数据类型直接将值保存在内存栈中，在比较相等性直接通过它们的值进行比较，而对象是属于引用数据类型，在内存栈中保存的是指针而非值，所以作为参数传递的对象和用于检查相等性的对象在内存中位于不同位置，所以它们的引用是不同的。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 吸底效果</title>
    <url>/CSS/cssxidixiaoguo/</url>
    <content><![CDATA[<p>今天给大家分享一种网页中常见的一种效果，叫做吸底效果。</p>
<p><img src="http://ww1.sinaimg.cn/large/6bdc6680gy1g9ewbqvma2g20c808b7wh.gif" alt="吸底效果展示"></p>
<p>当主体区域的内容较少时，页脚区不是随着内容区排布，而是吸底在浏览器的最下方；当主体区域的内容较多，撑出滚动条时，页脚区能随着内容区的增高而离开浏览器的底部，并始终显示在页面的最底部。</p>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>使用 CSS 中最新的 <code>calc()</code> 函数 和 视口单位：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></pre></td></tr></table></figure>



<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">/* 1vh = 视口高度的 1% */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">min-height</span>: <span class="built_in">calc</span>(100vh - 50px - 50px); </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">box-sizing</span>: border-box; </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="selector-tag">footer</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>缺点一就是不兼容低版本的IE，当然了现在连微软也放弃了IE，所以这一点可以忽略，缺点二就是每次都要重新计算容器的 <code>min-heighgt</code>。</p>
<a id="more"></a>

<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>使用弹性布局，HTML 结构同方法一：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">display</span>: flex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">flex-flow</span>: column; </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>; </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123; <span class="attribute">flex</span>: <span class="number">1</span>; &#125;</span></pre></td></tr></table></figure>

<p>如果不考虑 IE 兼容的话，该方案很完美。</p>
<h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">     主体内容</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    底部</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">position</span>: relative;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">min-height</span>:<span class="number">100%</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">50px</span>;   <span class="comment">/* 该值设置大于等于底部的高度 */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="selector-tag">footer</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">position</span>: absolute;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>布局</tag>
      </tags>
  </entry>
</search>
